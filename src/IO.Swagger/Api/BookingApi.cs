/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBookingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a package / course / ticket with its session to the booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 AddBookingDetail (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null);

        /// <summary>
        /// Add a package / course / ticket with its session to the booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> AddBookingDetailWithHttpInfo (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null);
        /// <summary>
        /// Attach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 AttachAccommodation (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null);

        /// <summary>
        /// Attach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> AttachAccommodationWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null);
        /// <summary>
        /// Attach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 AttachAddon (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null);

        /// <summary>
        /// Attach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> AttachAddonWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null);
        /// <summary>
        /// Attach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 AttachPickup (long? bookingId, string location, DateTime? date, string time);

        /// <summary>
        /// Attach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> AttachPickupWithHttpInfo (long? bookingId, string location, DateTime? date, string time);
        /// <summary>
        /// Cancel a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 CancelBooking (long? bookingId);

        /// <summary>
        /// Cancel a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> CancelBookingWithHttpInfo (long? bookingId);
        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 ConfirmBooking (long? bookingId);

        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> ConfirmBookingWithHttpInfo (long? bookingId);
        /// <summary>
        /// Delete a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeleteBooking (long? id);

        /// <summary>
        /// Delete a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeleteBookingWithHttpInfo (long? id);
        /// <summary>
        /// Dettach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 DettachAccommodation (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null);

        /// <summary>
        /// Dettach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> DettachAccommodationWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null);
        /// <summary>
        /// Dettach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 DettachAddon (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null);

        /// <summary>
        /// Dettach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> DettachAddonWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null);
        /// <summary>
        /// Dettach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DettachPickup (long? bookingId, long? id = null);

        /// <summary>
        /// Dettach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DettachPickupWithHttpInfo (long? bookingId, long? id = null);
        /// <summary>
        /// Edit the information related to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 EditBookingInfo (long? bookingId = null, double? discount = null, string comment = null);

        /// <summary>
        /// Edit the information related to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> EditBookingInfoWithHttpInfo (long? bookingId = null, double? discount = null, string comment = null);
        /// <summary>
        /// Get all bookings matching a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 FilterBookings (string reference = null, DateTime? date = null, string lastname = null);

        /// <summary>
        /// Get all bookings matching a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> FilterBookingsWithHttpInfo (string reference = null, DateTime? date = null, string lastname = null);
        /// <summary>
        /// Retrieve all bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Booking&gt;</returns>
        List<Booking> GetAllBookings ();

        /// <summary>
        /// Retrieve all bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Booking&gt;</returns>
        ApiResponse<List<Booking>> GetAllBookingsWithHttpInfo ();
        /// <summary>
        /// Retrieve all bookings including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Booking&gt;</returns>
        List<Booking> GetAllWithTrashedBookings ();

        /// <summary>
        /// Retrieve all bookings including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Booking&gt;</returns>
        ApiResponse<List<Booking>> GetAllWithTrashedBookingsWithHttpInfo ();
        /// <summary>
        /// Retrieve a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetBooking (long? id);

        /// <summary>
        /// Retrieve a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetBookingWithHttpInfo (long? id);
        /// <summary>
        /// Get all bookings for a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetCustomerBookings (long? customerId);

        /// <summary>
        /// Get all bookings for a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetCustomerBookingsWithHttpInfo (long? customerId);
        /// <summary>
        /// Retrieve all payments made for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetPayments (long? bookingId = null);

        /// <summary>
        /// Retrieve all payments made for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetPaymentsWithHttpInfo (long? bookingId = null);
        /// <summary>
        /// Retrieve all refunds for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetRefunds (long? bookingId = null);

        /// <summary>
        /// Retrieve all refunds for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetRefundsWithHttpInfo (long? bookingId = null);
        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetTodaysBookings ();

        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetTodaysBookingsWithHttpInfo ();
        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetTommorowsBookings ();

        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetTommorowsBookingsWithHttpInfo ();
        /// <summary>
        /// Create a new empty booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 InitBooking (string source, long? agentId = null, string agentReference = null);

        /// <summary>
        /// Create a new empty booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> InitBookingWithHttpInfo (string source, long? agentId = null, string agentReference = null);
        /// <summary>
        /// Remove a detail from a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 RemoveBookingDetail (long? bookingId, long? bookingdetailId);

        /// <summary>
        /// Remove a detail from a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> RemoveBookingDetailWithHttpInfo (long? bookingId, long? bookingdetailId);
        /// <summary>
        /// Resend the confirmation email to the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ResendConfirmation (long? bookingId);

        /// <summary>
        /// Resend the confirmation email to the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ResendConfirmationWithHttpInfo (long? bookingId);
        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 ReserveBooking (long? bookingId, DateTime? reservedUntil = null);

        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> ReserveBookingWithHttpInfo (long? bookingId, DateTime? reservedUntil = null);
        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 SaveBooking (long? bookingId);

        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> SaveBookingWithHttpInfo (long? bookingId);
        /// <summary>
        /// Set the lead customer for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 SetLeadCustomer (long? bookingId, long? customerId);

        /// <summary>
        /// Set the lead customer for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> SetLeadCustomerWithHttpInfo (long? bookingId, long? customerId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a package / course / ticket with its session to the booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> AddBookingDetailAsync (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null);

        /// <summary>
        /// Add a package / course / ticket with its session to the booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> AddBookingDetailAsyncWithHttpInfo (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null);
        /// <summary>
        /// Attach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> AttachAccommodationAsync (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null);

        /// <summary>
        /// Attach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> AttachAccommodationAsyncWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null);
        /// <summary>
        /// Attach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> AttachAddonAsync (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null);

        /// <summary>
        /// Attach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> AttachAddonAsyncWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null);
        /// <summary>
        /// Attach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> AttachPickupAsync (long? bookingId, string location, DateTime? date, string time);

        /// <summary>
        /// Attach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> AttachPickupAsyncWithHttpInfo (long? bookingId, string location, DateTime? date, string time);
        /// <summary>
        /// Cancel a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> CancelBookingAsync (long? bookingId);

        /// <summary>
        /// Cancel a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CancelBookingAsyncWithHttpInfo (long? bookingId);
        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> ConfirmBookingAsync (long? bookingId);

        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> ConfirmBookingAsyncWithHttpInfo (long? bookingId);
        /// <summary>
        /// Delete a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeleteBookingAsync (long? id);

        /// <summary>
        /// Delete a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteBookingAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Dettach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> DettachAccommodationAsync (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null);

        /// <summary>
        /// Dettach an accommodation booking to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> DettachAccommodationAsyncWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null);
        /// <summary>
        /// Dettach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> DettachAddonAsync (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null);

        /// <summary>
        /// Dettach an addon to a trip of a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> DettachAddonAsyncWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null);
        /// <summary>
        /// Dettach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DettachPickupAsync (long? bookingId, long? id = null);

        /// <summary>
        /// Dettach a pickup location for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DettachPickupAsyncWithHttpInfo (long? bookingId, long? id = null);
        /// <summary>
        /// Edit the information related to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> EditBookingInfoAsync (long? bookingId = null, double? discount = null, string comment = null);

        /// <summary>
        /// Edit the information related to a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> EditBookingInfoAsyncWithHttpInfo (long? bookingId = null, double? discount = null, string comment = null);
        /// <summary>
        /// Get all bookings matching a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> FilterBookingsAsync (string reference = null, DateTime? date = null, string lastname = null);

        /// <summary>
        /// Get all bookings matching a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> FilterBookingsAsyncWithHttpInfo (string reference = null, DateTime? date = null, string lastname = null);
        /// <summary>
        /// Retrieve all bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Booking&gt;</returns>
        System.Threading.Tasks.Task<List<Booking>> GetAllBookingsAsync ();

        /// <summary>
        /// Retrieve all bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Booking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Booking>>> GetAllBookingsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all bookings including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Booking&gt;</returns>
        System.Threading.Tasks.Task<List<Booking>> GetAllWithTrashedBookingsAsync ();

        /// <summary>
        /// Retrieve all bookings including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Booking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Booking>>> GetAllWithTrashedBookingsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetBookingAsync (long? id);

        /// <summary>
        /// Retrieve a booking by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetBookingAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get all bookings for a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetCustomerBookingsAsync (long? customerId);

        /// <summary>
        /// Get all bookings for a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCustomerBookingsAsyncWithHttpInfo (long? customerId);
        /// <summary>
        /// Retrieve all payments made for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetPaymentsAsync (long? bookingId = null);

        /// <summary>
        /// Retrieve all payments made for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetPaymentsAsyncWithHttpInfo (long? bookingId = null);
        /// <summary>
        /// Retrieve all refunds for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetRefundsAsync (long? bookingId = null);

        /// <summary>
        /// Retrieve all refunds for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetRefundsAsyncWithHttpInfo (long? bookingId = null);
        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetTodaysBookingsAsync ();

        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetTodaysBookingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetTommorowsBookingsAsync ();

        /// <summary>
        /// Get all bookings made today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetTommorowsBookingsAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new empty booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> InitBookingAsync (string source, long? agentId = null, string agentReference = null);

        /// <summary>
        /// Create a new empty booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> InitBookingAsyncWithHttpInfo (string source, long? agentId = null, string agentReference = null);
        /// <summary>
        /// Remove a detail from a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> RemoveBookingDetailAsync (long? bookingId, long? bookingdetailId);

        /// <summary>
        /// Remove a detail from a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> RemoveBookingDetailAsyncWithHttpInfo (long? bookingId, long? bookingdetailId);
        /// <summary>
        /// Resend the confirmation email to the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ResendConfirmationAsync (long? bookingId);

        /// <summary>
        /// Resend the confirmation email to the lead customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ResendConfirmationAsyncWithHttpInfo (long? bookingId);
        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> ReserveBookingAsync (long? bookingId, DateTime? reservedUntil = null);

        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> ReserveBookingAsyncWithHttpInfo (long? bookingId, DateTime? reservedUntil = null);
        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> SaveBookingAsync (long? bookingId);

        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> SaveBookingAsyncWithHttpInfo (long? bookingId);
        /// <summary>
        /// Set the lead customer for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> SetLeadCustomerAsync (long? bookingId, long? customerId);

        /// <summary>
        /// Set the lead customer for a booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> SetLeadCustomerAsyncWithHttpInfo (long? bookingId, long? customerId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BookingApi : IBookingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BookingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BookingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BookingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a package / course / ticket with its session to the booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 AddBookingDetail (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null)
        {
             ApiResponse<InlineResponse20010> localVarResponse = AddBookingDetailWithHttpInfo(bookingId, customerId, ticketId, sessionId, boatroomId, trainingSessionId, temporary, packageId, packagefacadeId, courseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a package / course / ticket with its session to the booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > AddBookingDetailWithHttpInfo (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AddBookingDetail");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->AddBookingDetail");

            var localVarPath = "/booking/add-detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter
            if (ticketId != null) localVarQueryParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // query parameter
            if (sessionId != null) localVarQueryParams.Add("session_id", Configuration.ApiClient.ParameterToString(sessionId)); // query parameter
            if (boatroomId != null) localVarQueryParams.Add("boatroom_id", Configuration.ApiClient.ParameterToString(boatroomId)); // query parameter
            if (trainingSessionId != null) localVarQueryParams.Add("training_session_id", Configuration.ApiClient.ParameterToString(trainingSessionId)); // query parameter
            if (temporary != null) localVarQueryParams.Add("temporary", Configuration.ApiClient.ParameterToString(temporary)); // query parameter
            if (packageId != null) localVarQueryParams.Add("package_id", Configuration.ApiClient.ParameterToString(packageId)); // query parameter
            if (packagefacadeId != null) localVarQueryParams.Add("packagefacade_id", Configuration.ApiClient.ParameterToString(packagefacadeId)); // query parameter
            if (courseId != null) localVarQueryParams.Add("course_id", Configuration.ApiClient.ParameterToString(courseId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBookingDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
            
        }

        /// <summary>
        /// Add a package / course / ticket with its session to the booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> AddBookingDetailAsync (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await AddBookingDetailAsyncWithHttpInfo(bookingId, customerId, ticketId, sessionId, boatroomId, trainingSessionId, temporary, packageId, packagefacadeId, courseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a package / course / ticket with its session to the booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="boatroomId"> (optional)</param>
        /// <param name="trainingSessionId"> (optional)</param>
        /// <param name="temporary"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> AddBookingDetailAsyncWithHttpInfo (long? bookingId, long? customerId, long? ticketId = null, long? sessionId = null, long? boatroomId = null, long? trainingSessionId = null, bool? temporary = null, long? packageId = null, long? packagefacadeId = null, long? courseId = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AddBookingDetail");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->AddBookingDetail");

            var localVarPath = "/booking/add-detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter
            if (ticketId != null) localVarQueryParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // query parameter
            if (sessionId != null) localVarQueryParams.Add("session_id", Configuration.ApiClient.ParameterToString(sessionId)); // query parameter
            if (boatroomId != null) localVarQueryParams.Add("boatroom_id", Configuration.ApiClient.ParameterToString(boatroomId)); // query parameter
            if (trainingSessionId != null) localVarQueryParams.Add("training_session_id", Configuration.ApiClient.ParameterToString(trainingSessionId)); // query parameter
            if (temporary != null) localVarQueryParams.Add("temporary", Configuration.ApiClient.ParameterToString(temporary)); // query parameter
            if (packageId != null) localVarQueryParams.Add("package_id", Configuration.ApiClient.ParameterToString(packageId)); // query parameter
            if (packagefacadeId != null) localVarQueryParams.Add("packagefacade_id", Configuration.ApiClient.ParameterToString(packagefacadeId)); // query parameter
            if (courseId != null) localVarQueryParams.Add("course_id", Configuration.ApiClient.ParameterToString(courseId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBookingDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
            
        }

        /// <summary>
        /// Attach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 AttachAccommodation (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = AttachAccommodationWithHttpInfo(bookingId, accommodationId, customerId, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > AttachAccommodationWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AttachAccommodation");
            // verify the required parameter 'accommodationId' is set
            if (accommodationId == null)
                throw new ApiException(400, "Missing required parameter 'accommodationId' when calling BookingApi->AttachAccommodation");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->AttachAccommodation");

            var localVarPath = "/booking/add-accommodation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (accommodationId != null) localVarQueryParams.Add("accommodation_id", Configuration.ApiClient.ParameterToString(accommodationId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
            
        }

        /// <summary>
        /// Attach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> AttachAccommodationAsync (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await AttachAccommodationAsyncWithHttpInfo(bookingId, accommodationId, customerId, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> AttachAccommodationAsyncWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null, DateTime? end = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AttachAccommodation");
            // verify the required parameter 'accommodationId' is set
            if (accommodationId == null)
                throw new ApiException(400, "Missing required parameter 'accommodationId' when calling BookingApi->AttachAccommodation");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->AttachAccommodation");

            var localVarPath = "/booking/add-accommodation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (accommodationId != null) localVarQueryParams.Add("accommodation_id", Configuration.ApiClient.ParameterToString(accommodationId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
            
        }

        /// <summary>
        /// Attach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 AttachAddon (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = AttachAddonWithHttpInfo(bookingId, bookingdetailId, addonId, quantity, packagefacadeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > AttachAddonWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AttachAddon");
            // verify the required parameter 'bookingdetailId' is set
            if (bookingdetailId == null)
                throw new ApiException(400, "Missing required parameter 'bookingdetailId' when calling BookingApi->AttachAddon");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling BookingApi->AttachAddon");

            var localVarPath = "/booking/add-addon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (bookingdetailId != null) localVarQueryParams.Add("bookingdetail_id", Configuration.ApiClient.ParameterToString(bookingdetailId)); // query parameter
            if (addonId != null) localVarQueryParams.Add("addon_id", Configuration.ApiClient.ParameterToString(addonId)); // query parameter
            if (quantity != null) localVarQueryParams.Add("quantity", Configuration.ApiClient.ParameterToString(quantity)); // query parameter
            if (packagefacadeId != null) localVarQueryParams.Add("packagefacade_id", Configuration.ApiClient.ParameterToString(packagefacadeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAddon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
            
        }

        /// <summary>
        /// Attach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> AttachAddonAsync (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await AttachAddonAsyncWithHttpInfo(bookingId, bookingdetailId, addonId, quantity, packagefacadeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> AttachAddonAsyncWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? quantity = null, long? packagefacadeId = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AttachAddon");
            // verify the required parameter 'bookingdetailId' is set
            if (bookingdetailId == null)
                throw new ApiException(400, "Missing required parameter 'bookingdetailId' when calling BookingApi->AttachAddon");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling BookingApi->AttachAddon");

            var localVarPath = "/booking/add-addon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (bookingdetailId != null) localVarQueryParams.Add("bookingdetail_id", Configuration.ApiClient.ParameterToString(bookingdetailId)); // query parameter
            if (addonId != null) localVarQueryParams.Add("addon_id", Configuration.ApiClient.ParameterToString(addonId)); // query parameter
            if (quantity != null) localVarQueryParams.Add("quantity", Configuration.ApiClient.ParameterToString(quantity)); // query parameter
            if (packagefacadeId != null) localVarQueryParams.Add("packagefacade_id", Configuration.ApiClient.ParameterToString(packagefacadeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAddon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
            
        }

        /// <summary>
        /// Attach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 AttachPickup (long? bookingId, string location, DateTime? date, string time)
        {
             ApiResponse<InlineResponse20011> localVarResponse = AttachPickupWithHttpInfo(bookingId, location, date, time);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > AttachPickupWithHttpInfo (long? bookingId, string location, DateTime? date, string time)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AttachPickup");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling BookingApi->AttachPickup");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling BookingApi->AttachPickup");
            // verify the required parameter 'time' is set
            if (time == null)
                throw new ApiException(400, "Missing required parameter 'time' when calling BookingApi->AttachPickup");

            var localVarPath = "/booking/add-pickup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (time != null) localVarQueryParams.Add("time", Configuration.ApiClient.ParameterToString(time)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachPickup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
            
        }

        /// <summary>
        /// Attach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> AttachPickupAsync (long? bookingId, string location, DateTime? date, string time)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await AttachPickupAsyncWithHttpInfo(bookingId, location, date, time);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="location"></param>
        /// <param name="date"></param>
        /// <param name="time"></param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> AttachPickupAsyncWithHttpInfo (long? bookingId, string location, DateTime? date, string time)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->AttachPickup");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling BookingApi->AttachPickup");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling BookingApi->AttachPickup");
            // verify the required parameter 'time' is set
            if (time == null)
                throw new ApiException(400, "Missing required parameter 'time' when calling BookingApi->AttachPickup");

            var localVarPath = "/booking/add-pickup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (time != null) localVarQueryParams.Add("time", Configuration.ApiClient.ParameterToString(time)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachPickup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
            
        }

        /// <summary>
        /// Cancel a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 CancelBooking (long? bookingId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = CancelBookingWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > CancelBookingWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->CancelBooking");

            var localVarPath = "/booking/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Cancel a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> CancelBookingAsync (long? bookingId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await CancelBookingAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CancelBookingAsyncWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->CancelBooking");

            var localVarPath = "/booking/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 ConfirmBooking (long? bookingId)
        {
             ApiResponse<InlineResponse20012> localVarResponse = ConfirmBookingWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > ConfirmBookingWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->ConfirmBooking");

            var localVarPath = "/booking/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
            
        }

        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> ConfirmBookingAsync (long? bookingId)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await ConfirmBookingAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm a booking and all of its sessions and notify the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> ConfirmBookingAsyncWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->ConfirmBooking");

            var localVarPath = "/booking/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
            
        }

        /// <summary>
        /// Delete a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeleteBooking (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DeleteBookingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DeleteBookingWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BookingApi->DeleteBooking");

            var localVarPath = "/booking/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Delete a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DeleteBookingAsync (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DeleteBookingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteBookingAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BookingApi->DeleteBooking");

            var localVarPath = "/booking/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Dettach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 DettachAccommodation (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = DettachAccommodationWithHttpInfo(bookingId, accommodationId, customerId, start);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dettach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > DettachAccommodationWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->DettachAccommodation");
            // verify the required parameter 'accommodationId' is set
            if (accommodationId == null)
                throw new ApiException(400, "Missing required parameter 'accommodationId' when calling BookingApi->DettachAccommodation");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->DettachAccommodation");

            var localVarPath = "/booking/remove-accommodation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (accommodationId != null) localVarQueryParams.Add("accommodation_id", Configuration.ApiClient.ParameterToString(accommodationId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DettachAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
            
        }

        /// <summary>
        /// Dettach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> DettachAccommodationAsync (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await DettachAccommodationAsyncWithHttpInfo(bookingId, accommodationId, customerId, start);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dettach an accommodation booking to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="accommodationId"></param>
        /// <param name="customerId"></param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> DettachAccommodationAsyncWithHttpInfo (long? bookingId, long? accommodationId, long? customerId, DateTime? start = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->DettachAccommodation");
            // verify the required parameter 'accommodationId' is set
            if (accommodationId == null)
                throw new ApiException(400, "Missing required parameter 'accommodationId' when calling BookingApi->DettachAccommodation");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->DettachAccommodation");

            var localVarPath = "/booking/remove-accommodation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (accommodationId != null) localVarQueryParams.Add("accommodation_id", Configuration.ApiClient.ParameterToString(accommodationId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DettachAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
            
        }

        /// <summary>
        /// Dettach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 DettachAddon (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = DettachAddonWithHttpInfo(bookingId, bookingdetailId, addonId, packagefacadeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dettach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > DettachAddonWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->DettachAddon");
            // verify the required parameter 'bookingdetailId' is set
            if (bookingdetailId == null)
                throw new ApiException(400, "Missing required parameter 'bookingdetailId' when calling BookingApi->DettachAddon");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling BookingApi->DettachAddon");

            var localVarPath = "/booking/remove-addon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (bookingdetailId != null) localVarQueryParams.Add("bookingdetail_id", Configuration.ApiClient.ParameterToString(bookingdetailId)); // query parameter
            if (addonId != null) localVarQueryParams.Add("addon_id", Configuration.ApiClient.ParameterToString(addonId)); // query parameter
            if (packagefacadeId != null) localVarQueryParams.Add("packagefacade_id", Configuration.ApiClient.ParameterToString(packagefacadeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DettachAddon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
            
        }

        /// <summary>
        /// Dettach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> DettachAddonAsync (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await DettachAddonAsyncWithHttpInfo(bookingId, bookingdetailId, addonId, packagefacadeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dettach an addon to a trip of a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <param name="addonId"></param>
        /// <param name="packagefacadeId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> DettachAddonAsyncWithHttpInfo (long? bookingId, long? bookingdetailId, long? addonId, long? packagefacadeId = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->DettachAddon");
            // verify the required parameter 'bookingdetailId' is set
            if (bookingdetailId == null)
                throw new ApiException(400, "Missing required parameter 'bookingdetailId' when calling BookingApi->DettachAddon");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling BookingApi->DettachAddon");

            var localVarPath = "/booking/remove-addon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (bookingdetailId != null) localVarQueryParams.Add("bookingdetail_id", Configuration.ApiClient.ParameterToString(bookingdetailId)); // query parameter
            if (addonId != null) localVarQueryParams.Add("addon_id", Configuration.ApiClient.ParameterToString(addonId)); // query parameter
            if (packagefacadeId != null) localVarQueryParams.Add("packagefacade_id", Configuration.ApiClient.ParameterToString(packagefacadeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DettachAddon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
            
        }

        /// <summary>
        /// Dettach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DettachPickup (long? bookingId, long? id = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DettachPickupWithHttpInfo(bookingId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dettach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DettachPickupWithHttpInfo (long? bookingId, long? id = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->DettachPickup");

            var localVarPath = "/booking/remove-pickup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DettachPickup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Dettach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DettachPickupAsync (long? bookingId, long? id = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DettachPickupAsyncWithHttpInfo(bookingId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dettach a pickup location for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DettachPickupAsyncWithHttpInfo (long? bookingId, long? id = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->DettachPickup");

            var localVarPath = "/booking/remove-pickup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DettachPickup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Edit the information related to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 EditBookingInfo (long? bookingId = null, double? discount = null, string comment = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = EditBookingInfoWithHttpInfo(bookingId, discount, comment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit the information related to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > EditBookingInfoWithHttpInfo (long? bookingId = null, double? discount = null, string comment = null)
        {

            var localVarPath = "/booking/edit-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (discount != null) localVarQueryParams.Add("discount", Configuration.ApiClient.ParameterToString(discount)); // query parameter
            if (comment != null) localVarQueryParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditBookingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
            
        }

        /// <summary>
        /// Edit the information related to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> EditBookingInfoAsync (long? bookingId = null, double? discount = null, string comment = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await EditBookingInfoAsyncWithHttpInfo(bookingId, discount, comment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit the information related to a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <param name="discount"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> EditBookingInfoAsyncWithHttpInfo (long? bookingId = null, double? discount = null, string comment = null)
        {

            var localVarPath = "/booking/edit-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (discount != null) localVarQueryParams.Add("discount", Configuration.ApiClient.ParameterToString(discount)); // query parameter
            if (comment != null) localVarQueryParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditBookingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
            
        }

        /// <summary>
        /// Get all bookings matching a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 FilterBookings (string reference = null, DateTime? date = null, string lastname = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = FilterBookingsWithHttpInfo(reference, date, lastname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bookings matching a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > FilterBookingsWithHttpInfo (string reference = null, DateTime? date = null, string lastname = null)
        {

            var localVarPath = "/booking/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reference != null) localVarQueryParams.Add("reference", Configuration.ApiClient.ParameterToString(reference)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (lastname != null) localVarQueryParams.Add("lastname", Configuration.ApiClient.ParameterToString(lastname)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Get all bookings matching a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> FilterBookingsAsync (string reference = null, DateTime? date = null, string lastname = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await FilterBookingsAsyncWithHttpInfo(reference, date, lastname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bookings matching a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> FilterBookingsAsyncWithHttpInfo (string reference = null, DateTime? date = null, string lastname = null)
        {

            var localVarPath = "/booking/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reference != null) localVarQueryParams.Add("reference", Configuration.ApiClient.ParameterToString(reference)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (lastname != null) localVarQueryParams.Add("lastname", Configuration.ApiClient.ParameterToString(lastname)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Retrieve all bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Booking&gt;</returns>
        public List<Booking> GetAllBookings ()
        {
             ApiResponse<List<Booking>> localVarResponse = GetAllBookingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Booking&gt;</returns>
        public ApiResponse< List<Booking> > GetAllBookingsWithHttpInfo ()
        {

            var localVarPath = "/booking/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Booking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Booking>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Booking>)));
            
        }

        /// <summary>
        /// Retrieve all bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Booking&gt;</returns>
        public async System.Threading.Tasks.Task<List<Booking>> GetAllBookingsAsync ()
        {
             ApiResponse<List<Booking>> localVarResponse = await GetAllBookingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Booking&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Booking>>> GetAllBookingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/booking/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Booking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Booking>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Booking>)));
            
        }

        /// <summary>
        /// Retrieve all bookings including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Booking&gt;</returns>
        public List<Booking> GetAllWithTrashedBookings ()
        {
             ApiResponse<List<Booking>> localVarResponse = GetAllWithTrashedBookingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all bookings including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Booking&gt;</returns>
        public ApiResponse< List<Booking> > GetAllWithTrashedBookingsWithHttpInfo ()
        {

            var localVarPath = "/booking/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Booking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Booking>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Booking>)));
            
        }

        /// <summary>
        /// Retrieve all bookings including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Booking&gt;</returns>
        public async System.Threading.Tasks.Task<List<Booking>> GetAllWithTrashedBookingsAsync ()
        {
             ApiResponse<List<Booking>> localVarResponse = await GetAllWithTrashedBookingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all bookings including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Booking&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Booking>>> GetAllWithTrashedBookingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/booking/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Booking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Booking>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Booking>)));
            
        }

        /// <summary>
        /// Retrieve a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetBooking (long? id)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetBookingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GetBookingWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BookingApi->GetBooking");

            var localVarPath = "/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
            
        }

        /// <summary>
        /// Retrieve a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetBookingAsync (long? id)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetBookingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a booking by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetBookingAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BookingApi->GetBooking");

            var localVarPath = "/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
            
        }

        /// <summary>
        /// Get all bookings for a customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetCustomerBookings (long? customerId)
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetCustomerBookingsWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bookings for a customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GetCustomerBookingsWithHttpInfo (long? customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->GetCustomerBookings");

            var localVarPath = "/booking/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Get all bookings for a customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetCustomerBookingsAsync (long? customerId)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetCustomerBookingsAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bookings for a customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCustomerBookingsAsyncWithHttpInfo (long? customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->GetCustomerBookings");

            var localVarPath = "/booking/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Retrieve all payments made for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetPayments (long? bookingId = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GetPaymentsWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all payments made for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GetPaymentsWithHttpInfo (long? bookingId = null)
        {

            var localVarPath = "/booking/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
            
        }

        /// <summary>
        /// Retrieve all payments made for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GetPaymentsAsync (long? bookingId = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GetPaymentsAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all payments made for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetPaymentsAsyncWithHttpInfo (long? bookingId = null)
        {

            var localVarPath = "/booking/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
            
        }

        /// <summary>
        /// Retrieve all refunds for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetRefunds (long? bookingId = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = GetRefundsWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all refunds for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > GetRefundsWithHttpInfo (long? bookingId = null)
        {

            var localVarPath = "/booking/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
            
        }

        /// <summary>
        /// Retrieve all refunds for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GetRefundsAsync (long? bookingId = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await GetRefundsAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all refunds for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetRefundsAsyncWithHttpInfo (long? bookingId = null)
        {

            var localVarPath = "/booking/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
            
        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetTodaysBookings ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetTodaysBookingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GetTodaysBookingsWithHttpInfo ()
        {

            var localVarPath = "/booking/today";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTodaysBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetTodaysBookingsAsync ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetTodaysBookingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetTodaysBookingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/booking/today";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTodaysBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetTommorowsBookings ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetTommorowsBookingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GetTommorowsBookingsWithHttpInfo ()
        {

            var localVarPath = "/booking/tommorow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTommorowsBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetTommorowsBookingsAsync ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetTommorowsBookingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bookings made today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetTommorowsBookingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/booking/tommorow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTommorowsBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
            
        }

        /// <summary>
        /// Create a new empty booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 InitBooking (string source, long? agentId = null, string agentReference = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = InitBookingWithHttpInfo(source, agentId, agentReference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new empty booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > InitBookingWithHttpInfo (string source, long? agentId = null, string agentReference = null)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling BookingApi->InitBooking");

            var localVarPath = "/booking/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (source != null) localVarQueryParams.Add("source", Configuration.ApiClient.ParameterToString(source)); // query parameter
            if (agentId != null) localVarQueryParams.Add("agent_id", Configuration.ApiClient.ParameterToString(agentId)); // query parameter
            if (agentReference != null) localVarQueryParams.Add("agent_reference", Configuration.ApiClient.ParameterToString(agentReference)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// Create a new empty booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> InitBookingAsync (string source, long? agentId = null, string agentReference = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = await InitBookingAsyncWithHttpInfo(source, agentId, agentReference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new empty booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="agentId"> (optional)</param>
        /// <param name="agentReference"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> InitBookingAsyncWithHttpInfo (string source, long? agentId = null, string agentReference = null)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling BookingApi->InitBooking");

            var localVarPath = "/booking/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (source != null) localVarQueryParams.Add("source", Configuration.ApiClient.ParameterToString(source)); // query parameter
            if (agentId != null) localVarQueryParams.Add("agent_id", Configuration.ApiClient.ParameterToString(agentId)); // query parameter
            if (agentReference != null) localVarQueryParams.Add("agent_reference", Configuration.ApiClient.ParameterToString(agentReference)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// Remove a detail from a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 RemoveBookingDetail (long? bookingId, long? bookingdetailId)
        {
             ApiResponse<InlineResponse20017> localVarResponse = RemoveBookingDetailWithHttpInfo(bookingId, bookingdetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a detail from a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > RemoveBookingDetailWithHttpInfo (long? bookingId, long? bookingdetailId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->RemoveBookingDetail");
            // verify the required parameter 'bookingdetailId' is set
            if (bookingdetailId == null)
                throw new ApiException(400, "Missing required parameter 'bookingdetailId' when calling BookingApi->RemoveBookingDetail");

            var localVarPath = "/booking/remove-detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (bookingdetailId != null) localVarQueryParams.Add("bookingdetail_id", Configuration.ApiClient.ParameterToString(bookingdetailId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveBookingDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
            
        }

        /// <summary>
        /// Remove a detail from a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> RemoveBookingDetailAsync (long? bookingId, long? bookingdetailId)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await RemoveBookingDetailAsyncWithHttpInfo(bookingId, bookingdetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a detail from a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="bookingdetailId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> RemoveBookingDetailAsyncWithHttpInfo (long? bookingId, long? bookingdetailId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->RemoveBookingDetail");
            // verify the required parameter 'bookingdetailId' is set
            if (bookingdetailId == null)
                throw new ApiException(400, "Missing required parameter 'bookingdetailId' when calling BookingApi->RemoveBookingDetail");

            var localVarPath = "/booking/remove-detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (bookingdetailId != null) localVarQueryParams.Add("bookingdetail_id", Configuration.ApiClient.ParameterToString(bookingdetailId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveBookingDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
            
        }

        /// <summary>
        /// Resend the confirmation email to the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ResendConfirmation (long? bookingId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = ResendConfirmationWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend the confirmation email to the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ResendConfirmationWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->ResendConfirmation");

            var localVarPath = "/booking/resend-confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Resend the confirmation email to the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ResendConfirmationAsync (long? bookingId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ResendConfirmationAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend the confirmation email to the lead customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ResendConfirmationAsyncWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->ResendConfirmation");

            var localVarPath = "/booking/resend-confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 ReserveBooking (long? bookingId, DateTime? reservedUntil = null)
        {
             ApiResponse<InlineResponse20018> localVarResponse = ReserveBookingWithHttpInfo(bookingId, reservedUntil);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > ReserveBookingWithHttpInfo (long? bookingId, DateTime? reservedUntil = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->ReserveBooking");

            var localVarPath = "/booking/reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (reservedUntil != null) localVarQueryParams.Add("reserved_until", Configuration.ApiClient.ParameterToString(reservedUntil)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReserveBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
            
        }

        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> ReserveBookingAsync (long? bookingId, DateTime? reservedUntil = null)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await ReserveBookingAsyncWithHttpInfo(bookingId, reservedUntil);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reserve a booking and its sessions capcity until a set date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="reservedUntil"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> ReserveBookingAsyncWithHttpInfo (long? bookingId, DateTime? reservedUntil = null)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->ReserveBooking");

            var localVarPath = "/booking/reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (reservedUntil != null) localVarQueryParams.Add("reserved_until", Configuration.ApiClient.ParameterToString(reservedUntil)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReserveBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
            
        }

        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 SaveBooking (long? bookingId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = SaveBookingWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > SaveBookingWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->SaveBooking");

            var localVarPath = "/booking/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> SaveBookingAsync (long? bookingId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await SaveBookingAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save a booking as a quote and release all capacity of sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> SaveBookingAsyncWithHttpInfo (long? bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->SaveBooking");

            var localVarPath = "/booking/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Set the lead customer for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 SetLeadCustomer (long? bookingId, long? customerId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = SetLeadCustomerWithHttpInfo(bookingId, customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the lead customer for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > SetLeadCustomerWithHttpInfo (long? bookingId, long? customerId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->SetLeadCustomer");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->SetLeadCustomer");

            var localVarPath = "/booking/set-lead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLeadCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Set the lead customer for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> SetLeadCustomerAsync (long? bookingId, long? customerId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await SetLeadCustomerAsyncWithHttpInfo(bookingId, customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the lead customer for a booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> SetLeadCustomerAsyncWithHttpInfo (long? bookingId, long? customerId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling BookingApi->SetLeadCustomer");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling BookingApi->SetLeadCustomer");

            var localVarPath = "/booking/set-lead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bookingId != null) localVarQueryParams.Add("booking_id", Configuration.ApiClient.ParameterToString(bookingId)); // query parameter
            if (customerId != null) localVarQueryParams.Add("customer_id", Configuration.ApiClient.ParameterToString(customerId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLeadCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

    }
}
