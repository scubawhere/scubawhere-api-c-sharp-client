/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccommodationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 AddAccommodation (string name, long? capacity, int? basePrices, string description = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> AddAccommodationWithHttpInfo (string name, long? capacity, int? basePrices, string description = null);
        /// <summary>
        /// Delete an accommodation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteAccommodation (long? body);

        /// <summary>
        /// Delete an accommodation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteAccommodationWithHttpInfo (long? body);
        /// <summary>
        /// Create a new agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 EditAgent (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null);

        /// <summary>
        /// Create a new agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> EditAgentWithHttpInfo (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null);
        /// <summary>
        /// Get all the accommodations matching a filter
        /// </summary>
        /// <remarks>
        /// Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 FilterAccommodation (DateTime? before = null, DateTime? after = null, long? accommodationId = null);

        /// <summary>
        /// Get all the accommodations matching a filter
        /// </summary>
        /// <remarks>
        /// Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> FilterAccommodationWithHttpInfo (DateTime? before = null, DateTime? after = null, long? accommodationId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an accommodation by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 FindAccommodation (List<long?> id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an accommodation by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> FindAccommodationWithHttpInfo (List<long?> id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Accommodation&gt;</returns>
        List<Accommodation> GetAllAccommodations ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Accommodation&gt;</returns>
        ApiResponse<List<Accommodation>> GetAllAccommodationsWithHttpInfo ();
        /// <summary>
        /// Retrieve all accommodation including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Accommodation&gt;</returns>
        List<Accommodation> GetAllWithTrashedAccommodations ();

        /// <summary>
        /// Retrieve all accommodation including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Accommodation&gt;</returns>
        ApiResponse<List<Accommodation>> GetAllWithTrashedAccommodationsWithHttpInfo ();
        /// <summary>
        /// Update an Accommodation
        /// </summary>
        /// <remarks>
        /// Updates the accommodation by id using the specified fields
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 UpdateAccommodation (long? id, string name = null, long? capacity = null);

        /// <summary>
        /// Update an Accommodation
        /// </summary>
        /// <remarks>
        /// Updates the accommodation by id using the specified fields
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> UpdateAccommodationWithHttpInfo (long? id, string name = null, long? capacity = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> AddAccommodationAsync (string name, long? capacity, int? basePrices, string description = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AddAccommodationAsyncWithHttpInfo (string name, long? capacity, int? basePrices, string description = null);
        /// <summary>
        /// Delete an accommodation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteAccommodationAsync (long? body);

        /// <summary>
        /// Delete an accommodation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteAccommodationAsyncWithHttpInfo (long? body);
        /// <summary>
        /// Create a new agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> EditAgentAsync (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null);

        /// <summary>
        /// Create a new agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> EditAgentAsyncWithHttpInfo (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null);
        /// <summary>
        /// Get all the accommodations matching a filter
        /// </summary>
        /// <remarks>
        /// Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> FilterAccommodationAsync (DateTime? before = null, DateTime? after = null, long? accommodationId = null);

        /// <summary>
        /// Get all the accommodations matching a filter
        /// </summary>
        /// <remarks>
        /// Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FilterAccommodationAsyncWithHttpInfo (DateTime? before = null, DateTime? after = null, long? accommodationId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an accommodation by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> FindAccommodationAsync (List<long?> id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an accommodation by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FindAccommodationAsyncWithHttpInfo (List<long?> id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Accommodation&gt;</returns>
        System.Threading.Tasks.Task<List<Accommodation>> GetAllAccommodationsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all accommodation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Accommodation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Accommodation>>> GetAllAccommodationsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all accommodation including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Accommodation&gt;</returns>
        System.Threading.Tasks.Task<List<Accommodation>> GetAllWithTrashedAccommodationsAsync ();

        /// <summary>
        /// Retrieve all accommodation including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Accommodation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Accommodation>>> GetAllWithTrashedAccommodationsAsyncWithHttpInfo ();
        /// <summary>
        /// Update an Accommodation
        /// </summary>
        /// <remarks>
        /// Updates the accommodation by id using the specified fields
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> UpdateAccommodationAsync (long? id, string name = null, long? capacity = null);

        /// <summary>
        /// Update an Accommodation
        /// </summary>
        /// <remarks>
        /// Updates the accommodation by id using the specified fields
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UpdateAccommodationAsyncWithHttpInfo (long? id, string name = null, long? capacity = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccommodationApi : IAccommodationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccommodationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccommodationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccommodationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccommodationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create an accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 AddAccommodation (string name, long? capacity, int? basePrices, string description = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = AddAccommodationWithHttpInfo(name, capacity, basePrices, description);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > AddAccommodationWithHttpInfo (string name, long? capacity, int? basePrices, string description = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AccommodationApi->AddAccommodation");
            // verify the required parameter 'capacity' is set
            if (capacity == null)
                throw new ApiException(400, "Missing required parameter 'capacity' when calling AccommodationApi->AddAccommodation");
            // verify the required parameter 'basePrices' is set
            if (basePrices == null)
                throw new ApiException(400, "Missing required parameter 'basePrices' when calling AccommodationApi->AddAccommodation");

            var localVarPath = "/accommodation/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (capacity != null) localVarQueryParams.Add("capacity", Configuration.ApiClient.ParameterToString(capacity)); // query parameter
            if (basePrices != null) localVarQueryParams.Add("base_prices", Configuration.ApiClient.ParameterToString(basePrices)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Create an accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> AddAccommodationAsync (string name, long? capacity, int? basePrices, string description = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await AddAccommodationAsyncWithHttpInfo(name, capacity, basePrices, description);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create an accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the type of accommodation</param>
        /// <param name="capacity">Number of beds in the accommodation</param>
        /// <param name="basePrices">Price of the accommodation and the dates of when the price is applicable</param>
        /// <param name="description">Description of the accommodation (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AddAccommodationAsyncWithHttpInfo (string name, long? capacity, int? basePrices, string description = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AccommodationApi->AddAccommodation");
            // verify the required parameter 'capacity' is set
            if (capacity == null)
                throw new ApiException(400, "Missing required parameter 'capacity' when calling AccommodationApi->AddAccommodation");
            // verify the required parameter 'basePrices' is set
            if (basePrices == null)
                throw new ApiException(400, "Missing required parameter 'basePrices' when calling AccommodationApi->AddAccommodation");

            var localVarPath = "/accommodation/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (capacity != null) localVarQueryParams.Add("capacity", Configuration.ApiClient.ParameterToString(capacity)); // query parameter
            if (basePrices != null) localVarQueryParams.Add("base_prices", Configuration.ApiClient.ParameterToString(basePrices)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Delete an accommodation by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteAccommodation (long? body)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteAccommodationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an accommodation by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteAccommodationWithHttpInfo (long? body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccommodationApi->DeleteAccommodation");

            var localVarPath = "/accommodation/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null) localVarQueryParams.Add("body", Configuration.ApiClient.ParameterToString(body)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Delete an accommodation by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteAccommodationAsync (long? body)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteAccommodationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an accommodation by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ID of the accommodation</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteAccommodationAsyncWithHttpInfo (long? body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccommodationApi->DeleteAccommodation");

            var localVarPath = "/accommodation/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null) localVarQueryParams.Add("body", Configuration.ApiClient.ParameterToString(body)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Create a new agent 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 EditAgent (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = EditAgentWithHttpInfo(id, name, branchName, branchAddress, branchPhone, branchEmail, commission, terms, website, billingAddress, billingPhone, billingEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new agent 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > EditAgentWithHttpInfo (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchName' is set
            if (branchName == null)
                throw new ApiException(400, "Missing required parameter 'branchName' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchAddress' is set
            if (branchAddress == null)
                throw new ApiException(400, "Missing required parameter 'branchAddress' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchPhone' is set
            if (branchPhone == null)
                throw new ApiException(400, "Missing required parameter 'branchPhone' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchEmail' is set
            if (branchEmail == null)
                throw new ApiException(400, "Missing required parameter 'branchEmail' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'commission' is set
            if (commission == null)
                throw new ApiException(400, "Missing required parameter 'commission' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'terms' is set
            if (terms == null)
                throw new ApiException(400, "Missing required parameter 'terms' when calling AccommodationApi->EditAgent");

            var localVarPath = "/agent/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (website != null) localVarQueryParams.Add("website", Configuration.ApiClient.ParameterToString(website)); // query parameter
            if (branchName != null) localVarQueryParams.Add("branch_name", Configuration.ApiClient.ParameterToString(branchName)); // query parameter
            if (branchAddress != null) localVarQueryParams.Add("branch_address", Configuration.ApiClient.ParameterToString(branchAddress)); // query parameter
            if (branchPhone != null) localVarQueryParams.Add("branch_phone", Configuration.ApiClient.ParameterToString(branchPhone)); // query parameter
            if (branchEmail != null) localVarQueryParams.Add("branch_email", Configuration.ApiClient.ParameterToString(branchEmail)); // query parameter
            if (billingAddress != null) localVarQueryParams.Add("billing_address", Configuration.ApiClient.ParameterToString(billingAddress)); // query parameter
            if (billingPhone != null) localVarQueryParams.Add("billing_phone", Configuration.ApiClient.ParameterToString(billingPhone)); // query parameter
            if (billingEmail != null) localVarQueryParams.Add("billing_email", Configuration.ApiClient.ParameterToString(billingEmail)); // query parameter
            if (commission != null) localVarQueryParams.Add("commission", Configuration.ApiClient.ParameterToString(commission)); // query parameter
            if (terms != null) localVarQueryParams.Add("terms", Configuration.ApiClient.ParameterToString(terms)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
            
        }

        /// <summary>
        /// Create a new agent 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> EditAgentAsync (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await EditAgentAsyncWithHttpInfo(id, name, branchName, branchAddress, branchPhone, branchEmail, commission, terms, website, billingAddress, billingPhone, billingEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new agent 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="branchName"></param>
        /// <param name="branchAddress"></param>
        /// <param name="branchPhone"></param>
        /// <param name="branchEmail"></param>
        /// <param name="commission"></param>
        /// <param name="terms"></param>
        /// <param name="website"> (optional)</param>
        /// <param name="billingAddress"> (optional)</param>
        /// <param name="billingPhone"> (optional)</param>
        /// <param name="billingEmail"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> EditAgentAsyncWithHttpInfo (long? id, long? name, string branchName, string branchAddress, string branchPhone, string branchEmail, float? commission, string terms, string website = null, string billingAddress = null, string billingPhone = null, string billingEmail = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchName' is set
            if (branchName == null)
                throw new ApiException(400, "Missing required parameter 'branchName' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchAddress' is set
            if (branchAddress == null)
                throw new ApiException(400, "Missing required parameter 'branchAddress' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchPhone' is set
            if (branchPhone == null)
                throw new ApiException(400, "Missing required parameter 'branchPhone' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'branchEmail' is set
            if (branchEmail == null)
                throw new ApiException(400, "Missing required parameter 'branchEmail' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'commission' is set
            if (commission == null)
                throw new ApiException(400, "Missing required parameter 'commission' when calling AccommodationApi->EditAgent");
            // verify the required parameter 'terms' is set
            if (terms == null)
                throw new ApiException(400, "Missing required parameter 'terms' when calling AccommodationApi->EditAgent");

            var localVarPath = "/agent/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (website != null) localVarQueryParams.Add("website", Configuration.ApiClient.ParameterToString(website)); // query parameter
            if (branchName != null) localVarQueryParams.Add("branch_name", Configuration.ApiClient.ParameterToString(branchName)); // query parameter
            if (branchAddress != null) localVarQueryParams.Add("branch_address", Configuration.ApiClient.ParameterToString(branchAddress)); // query parameter
            if (branchPhone != null) localVarQueryParams.Add("branch_phone", Configuration.ApiClient.ParameterToString(branchPhone)); // query parameter
            if (branchEmail != null) localVarQueryParams.Add("branch_email", Configuration.ApiClient.ParameterToString(branchEmail)); // query parameter
            if (billingAddress != null) localVarQueryParams.Add("billing_address", Configuration.ApiClient.ParameterToString(billingAddress)); // query parameter
            if (billingPhone != null) localVarQueryParams.Add("billing_phone", Configuration.ApiClient.ParameterToString(billingPhone)); // query parameter
            if (billingEmail != null) localVarQueryParams.Add("billing_email", Configuration.ApiClient.ParameterToString(billingEmail)); // query parameter
            if (commission != null) localVarQueryParams.Add("commission", Configuration.ApiClient.ParameterToString(commission)); // query parameter
            if (terms != null) localVarQueryParams.Add("terms", Configuration.ApiClient.ParameterToString(terms)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
            
        }

        /// <summary>
        /// Get all the accommodations matching a filter Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 FilterAccommodation (DateTime? before = null, DateTime? after = null, long? accommodationId = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = FilterAccommodationWithHttpInfo(before, after, accommodationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the accommodations matching a filter Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > FilterAccommodationWithHttpInfo (DateTime? before = null, DateTime? after = null, long? accommodationId = null)
        {

            var localVarPath = "/accommodation/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (accommodationId != null) localVarQueryParams.Add("accommodation_id", Configuration.ApiClient.ParameterToString(accommodationId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Get all the accommodations matching a filter Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> FilterAccommodationAsync (DateTime? before = null, DateTime? after = null, long? accommodationId = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await FilterAccommodationAsyncWithHttpInfo(before, after, accommodationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the accommodations matching a filter Get all the accommodations and their bookings between certain dates and / or an accommodation id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The date for the upper boundary of the dates (optional)</param>
        /// <param name="after">The date for the lower boundary of the dates (optional)</param>
        /// <param name="accommodationId">ID Accommodation to filter by (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FilterAccommodationAsyncWithHttpInfo (DateTime? before = null, DateTime? after = null, long? accommodationId = null)
        {

            var localVarPath = "/accommodation/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (accommodationId != null) localVarQueryParams.Add("accommodation_id", Configuration.ApiClient.ParameterToString(accommodationId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Retrieve an accommodation by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 FindAccommodation (List<long?> id)
        {
             ApiResponse<InlineResponse200> localVarResponse = FindAccommodationWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve an accommodation by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > FindAccommodationWithHttpInfo (List<long?> id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccommodationApi->FindAccommodation");

            var localVarPath = "/accommodation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Retrieve an accommodation by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> FindAccommodationAsync (List<long?> id)
        {
             ApiResponse<InlineResponse200> localVarResponse = await FindAccommodationAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve an accommodation by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the accommodation to be retrieved</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FindAccommodationAsyncWithHttpInfo (List<long?> id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccommodationApi->FindAccommodation");

            var localVarPath = "/accommodation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Retrieve all accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Accommodation&gt;</returns>
        public List<Accommodation> GetAllAccommodations ()
        {
             ApiResponse<List<Accommodation>> localVarResponse = GetAllAccommodationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Accommodation&gt;</returns>
        public ApiResponse< List<Accommodation> > GetAllAccommodationsWithHttpInfo ()
        {

            var localVarPath = "/accommodations/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccommodations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Accommodation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Accommodation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Accommodation>)));
            
        }

        /// <summary>
        ///  Retrieve all accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Accommodation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Accommodation>> GetAllAccommodationsAsync ()
        {
             ApiResponse<List<Accommodation>> localVarResponse = await GetAllAccommodationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all accommodation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Accommodation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Accommodation>>> GetAllAccommodationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accommodations/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccommodations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Accommodation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Accommodation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Accommodation>)));
            
        }

        /// <summary>
        /// Retrieve all accommodation including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Accommodation&gt;</returns>
        public List<Accommodation> GetAllWithTrashedAccommodations ()
        {
             ApiResponse<List<Accommodation>> localVarResponse = GetAllWithTrashedAccommodationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all accommodation including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Accommodation&gt;</returns>
        public ApiResponse< List<Accommodation> > GetAllWithTrashedAccommodationsWithHttpInfo ()
        {

            var localVarPath = "/accommodations/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedAccommodations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Accommodation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Accommodation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Accommodation>)));
            
        }

        /// <summary>
        /// Retrieve all accommodation including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Accommodation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Accommodation>> GetAllWithTrashedAccommodationsAsync ()
        {
             ApiResponse<List<Accommodation>> localVarResponse = await GetAllWithTrashedAccommodationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all accommodation including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Accommodation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Accommodation>>> GetAllWithTrashedAccommodationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accommodations/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedAccommodations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Accommodation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Accommodation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Accommodation>)));
            
        }

        /// <summary>
        /// Update an Accommodation Updates the accommodation by id using the specified fields
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 UpdateAccommodation (long? id, string name = null, long? capacity = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = UpdateAccommodationWithHttpInfo(id, name, capacity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Accommodation Updates the accommodation by id using the specified fields
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > UpdateAccommodationWithHttpInfo (long? id, string name = null, long? capacity = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccommodationApi->UpdateAccommodation");

            var localVarPath = "/accommodation/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (capacity != null) localVarQueryParams.Add("capacity", Configuration.ApiClient.ParameterToString(capacity)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Update an Accommodation Updates the accommodation by id using the specified fields
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> UpdateAccommodationAsync (long? id, string name = null, long? capacity = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await UpdateAccommodationAsyncWithHttpInfo(id, name, capacity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Accommodation Updates the accommodation by id using the specified fields
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Accommodation to be updated</param>
        /// <param name="name">Name of the Accommodation (optional)</param>
        /// <param name="capacity">Number of rooms the accommodation holds (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UpdateAccommodationAsyncWithHttpInfo (long? id, string name = null, long? capacity = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccommodationApi->UpdateAccommodation");

            var localVarPath = "/accommodation/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (capacity != null) localVarQueryParams.Add("capacity", Configuration.ApiClient.ParameterToString(capacity)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccommodation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

    }
}
