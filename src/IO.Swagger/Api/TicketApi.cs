/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITicketApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 AddTicket (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);

        /// <summary>
        /// Create a new ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> AddTicketWithHttpInfo (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);
        /// <summary>
        /// Delete a ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 DeleteTicket (string name);

        /// <summary>
        /// Delete a ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> DeleteTicketWithHttpInfo (string name);
        /// <summary>
        /// Update an existing ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 EditTicket (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);

        /// <summary>
        /// Update an existing ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> EditTicketWithHttpInfo (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);
        /// <summary>
        /// Retrieve all tickets that are available to booked today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticket&gt;</returns>
        List<Ticket> GetAllAvailableTickets ();

        /// <summary>
        /// Retrieve all tickets that are available to booked today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        ApiResponse<List<Ticket>> GetAllAvailableTicketsWithHttpInfo ();
        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticket&gt;</returns>
        List<Ticket> GetAllTickets ();

        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        ApiResponse<List<Ticket>> GetAllTicketsWithHttpInfo ();
        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticket&gt;</returns>
        List<Ticket> GetAllWithTrashedTickets ();

        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        ApiResponse<List<Ticket>> GetAllWithTrashedTicketsWithHttpInfo ();
        /// <summary>
        /// Retrieve a ticket by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Ticket</returns>
        Ticket GetTicket (long? id);

        /// <summary>
        /// Retrieve a ticket by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Ticket</returns>
        ApiResponse<Ticket> GetTicketWithHttpInfo (long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> AddTicketAsync (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);

        /// <summary>
        /// Create a new ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> AddTicketAsyncWithHttpInfo (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);
        /// <summary>
        /// Delete a ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> DeleteTicketAsync (string name);

        /// <summary>
        /// Delete a ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> DeleteTicketAsyncWithHttpInfo (string name);
        /// <summary>
        /// Update an existing ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> EditTicketAsync (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);

        /// <summary>
        /// Update an existing ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> EditTicketAsyncWithHttpInfo (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null);
        /// <summary>
        /// Retrieve all tickets that are available to booked today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        System.Threading.Tasks.Task<List<Ticket>> GetAllAvailableTicketsAsync ();

        /// <summary>
        /// Retrieve all tickets that are available to booked today
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetAllAvailableTicketsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        System.Threading.Tasks.Task<List<Ticket>> GetAllTicketsAsync ();

        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetAllTicketsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        System.Threading.Tasks.Task<List<Ticket>> GetAllWithTrashedTicketsAsync ();

        /// <summary>
        /// Retrieve all tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetAllWithTrashedTicketsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a ticket by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Ticket</returns>
        System.Threading.Tasks.Task<Ticket> GetTicketAsync (long? id);

        /// <summary>
        /// Retrieve a ticket by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketAsyncWithHttpInfo (long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TicketApi : ITicketApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TicketApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TicketApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 AddTicket (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = AddTicketWithHttpInfo(name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > AddTicketWithHttpInfo (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TicketApi->AddTicket");
            // verify the required parameter 'trips' is set
            if (trips == null)
                throw new ApiException(400, "Missing required parameter 'trips' when calling TicketApi->AddTicket");
            // verify the required parameter 'prices' is set
            if (prices == null)
                throw new ApiException(400, "Missing required parameter 'prices' when calling TicketApi->AddTicket");

            var localVarPath = "/ticket/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (onlyPackaged != null) localVarQueryParams.Add("only_packaged", Configuration.ApiClient.ParameterToString(onlyPackaged)); // query parameter
            if (trips != null) localVarQueryParams.Add("trips", Configuration.ApiClient.ParameterToString(trips)); // query parameter
            if (boats != null) localVarQueryParams.Add("boats", Configuration.ApiClient.ParameterToString(boats)); // query parameter
            if (boatrooms != null) localVarQueryParams.Add("boatrooms", Configuration.ApiClient.ParameterToString(boatrooms)); // query parameter
            if (prices != null && prices.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(prices); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prices; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
            
        }

        /// <summary>
        /// Create a new ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> AddTicketAsync (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await AddTicketAsyncWithHttpInfo(name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> AddTicketAsyncWithHttpInfo (string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TicketApi->AddTicket");
            // verify the required parameter 'trips' is set
            if (trips == null)
                throw new ApiException(400, "Missing required parameter 'trips' when calling TicketApi->AddTicket");
            // verify the required parameter 'prices' is set
            if (prices == null)
                throw new ApiException(400, "Missing required parameter 'prices' when calling TicketApi->AddTicket");

            var localVarPath = "/ticket/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (onlyPackaged != null) localVarQueryParams.Add("only_packaged", Configuration.ApiClient.ParameterToString(onlyPackaged)); // query parameter
            if (trips != null) localVarQueryParams.Add("trips", Configuration.ApiClient.ParameterToString(trips)); // query parameter
            if (boats != null) localVarQueryParams.Add("boats", Configuration.ApiClient.ParameterToString(boats)); // query parameter
            if (boatrooms != null) localVarQueryParams.Add("boatrooms", Configuration.ApiClient.ParameterToString(boatrooms)); // query parameter
            if (prices != null && prices.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(prices); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prices; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
            
        }

        /// <summary>
        /// Delete a ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 DeleteTicket (string name)
        {
             ApiResponse<InlineResponse2014> localVarResponse = DeleteTicketWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > DeleteTicketWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TicketApi->DeleteTicket");

            var localVarPath = "/ticket/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
            
        }

        /// <summary>
        /// Delete a ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> DeleteTicketAsync (string name)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await DeleteTicketAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> DeleteTicketAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TicketApi->DeleteTicket");

            var localVarPath = "/ticket/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
            
        }

        /// <summary>
        /// Update an existing ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 EditTicket (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = EditTicketWithHttpInfo(id, name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > EditTicketWithHttpInfo (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TicketApi->EditTicket");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TicketApi->EditTicket");
            // verify the required parameter 'trips' is set
            if (trips == null)
                throw new ApiException(400, "Missing required parameter 'trips' when calling TicketApi->EditTicket");
            // verify the required parameter 'prices' is set
            if (prices == null)
                throw new ApiException(400, "Missing required parameter 'prices' when calling TicketApi->EditTicket");

            var localVarPath = "/ticket/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (onlyPackaged != null) localVarQueryParams.Add("only_packaged", Configuration.ApiClient.ParameterToString(onlyPackaged)); // query parameter
            if (trips != null) localVarQueryParams.Add("trips", Configuration.ApiClient.ParameterToString(trips)); // query parameter
            if (boats != null) localVarQueryParams.Add("boats", Configuration.ApiClient.ParameterToString(boats)); // query parameter
            if (boatrooms != null) localVarQueryParams.Add("boatrooms", Configuration.ApiClient.ParameterToString(boatrooms)); // query parameter
            if (prices != null && prices.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(prices); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prices; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
            
        }

        /// <summary>
        /// Update an existing ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> EditTicketAsync (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await EditTicketAsyncWithHttpInfo(id, name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing ticket 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trips"></param>
        /// <param name="prices"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="onlyPackaged"> (optional)</param>
        /// <param name="boats"> (optional)</param>
        /// <param name="boatrooms"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> EditTicketAsyncWithHttpInfo (long? id, string name, List<long?> trips, BasePrice prices, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, bool? onlyPackaged = null, List<long?> boats = null, List<long?> boatrooms = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TicketApi->EditTicket");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TicketApi->EditTicket");
            // verify the required parameter 'trips' is set
            if (trips == null)
                throw new ApiException(400, "Missing required parameter 'trips' when calling TicketApi->EditTicket");
            // verify the required parameter 'prices' is set
            if (prices == null)
                throw new ApiException(400, "Missing required parameter 'prices' when calling TicketApi->EditTicket");

            var localVarPath = "/ticket/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (onlyPackaged != null) localVarQueryParams.Add("only_packaged", Configuration.ApiClient.ParameterToString(onlyPackaged)); // query parameter
            if (trips != null) localVarQueryParams.Add("trips", Configuration.ApiClient.ParameterToString(trips)); // query parameter
            if (boats != null) localVarQueryParams.Add("boats", Configuration.ApiClient.ParameterToString(boats)); // query parameter
            if (boatrooms != null) localVarQueryParams.Add("boatrooms", Configuration.ApiClient.ParameterToString(boatrooms)); // query parameter
            if (prices != null && prices.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(prices); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prices; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
            
        }

        /// <summary>
        /// Retrieve all tickets that are available to booked today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticket&gt;</returns>
        public List<Ticket> GetAllAvailableTickets ()
        {
             ApiResponse<List<Ticket>> localVarResponse = GetAllAvailableTicketsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all tickets that are available to booked today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        public ApiResponse< List<Ticket> > GetAllAvailableTicketsWithHttpInfo ()
        {

            var localVarPath = "/ticket/only-available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAvailableTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
            
        }

        /// <summary>
        /// Retrieve all tickets that are available to booked today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ticket>> GetAllAvailableTicketsAsync ()
        {
             ApiResponse<List<Ticket>> localVarResponse = await GetAllAvailableTicketsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all tickets that are available to booked today 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetAllAvailableTicketsAsyncWithHttpInfo ()
        {

            var localVarPath = "/ticket/only-available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAvailableTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
            
        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticket&gt;</returns>
        public List<Ticket> GetAllTickets ()
        {
             ApiResponse<List<Ticket>> localVarResponse = GetAllTicketsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        public ApiResponse< List<Ticket> > GetAllTicketsWithHttpInfo ()
        {

            var localVarPath = "/ticket/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
            
        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ticket>> GetAllTicketsAsync ()
        {
             ApiResponse<List<Ticket>> localVarResponse = await GetAllTicketsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetAllTicketsAsyncWithHttpInfo ()
        {

            var localVarPath = "/ticket/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
            
        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticket&gt;</returns>
        public List<Ticket> GetAllWithTrashedTickets ()
        {
             ApiResponse<List<Ticket>> localVarResponse = GetAllWithTrashedTicketsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        public ApiResponse< List<Ticket> > GetAllWithTrashedTicketsWithHttpInfo ()
        {

            var localVarPath = "/ticket/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
            
        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ticket>> GetAllWithTrashedTicketsAsync ()
        {
             ApiResponse<List<Ticket>> localVarResponse = await GetAllWithTrashedTicketsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all tickets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetAllWithTrashedTicketsAsyncWithHttpInfo ()
        {

            var localVarPath = "/ticket/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
            
        }

        /// <summary>
        /// Retrieve a ticket by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Ticket</returns>
        public Ticket GetTicket (long? id)
        {
             ApiResponse<Ticket> localVarResponse = GetTicketWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a ticket by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Ticket</returns>
        public ApiResponse< Ticket > GetTicketWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TicketApi->GetTicket");

            var localVarPath = "/ticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
            
        }

        /// <summary>
        /// Retrieve a ticket by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Ticket</returns>
        public async System.Threading.Tasks.Task<Ticket> GetTicketAsync (long? id)
        {
             ApiResponse<Ticket> localVarResponse = await GetTicketAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a ticket by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TicketApi->GetTicket");

            var localVarPath = "/ticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
            
        }

    }
}
