/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 CreateCustomer (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);

        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> CreateCustomerWithHttpInfo (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);
        /// <summary>
        /// Delete a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeleteCustomer (long? id);

        /// <summary>
        /// Delete a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeleteCustomerWithHttpInfo (long? id);
        /// <summary>
        /// Update a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 EditCustomer (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);

        /// <summary>
        /// Update a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> EditCustomerWithHttpInfo (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);
        /// <summary>
        /// Retrieve all customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Customer&gt;</returns>
        List<Customer> GetAllCustomers ();

        /// <summary>
        /// Retrieve all customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        ApiResponse<List<Customer>> GetAllCustomersWithHttpInfo ();
        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetCustomer (long? id = null);

        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetCustomerWithHttpInfo (long? id = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> CreateCustomerAsync (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);

        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> CreateCustomerAsyncWithHttpInfo (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);
        /// <summary>
        /// Delete a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeleteCustomerAsync (long? id);

        /// <summary>
        /// Delete a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteCustomerAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> EditCustomerAsync (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);

        /// <summary>
        /// Update a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> EditCustomerAsyncWithHttpInfo (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null);
        /// <summary>
        /// Retrieve all customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        System.Threading.Tasks.Task<List<Customer>> GetAllCustomersAsync ();

        /// <summary>
        /// Retrieve all customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Customer>>> GetAllCustomersAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetCustomerAsync (long? id = null);

        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetCustomerAsyncWithHttpInfo (long? id = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerApi : ICustomerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 CreateCustomer (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = CreateCustomerWithHttpInfo(email, firstname, lastname, birthday, gender, address1, address2, city, county, postcode, countryId, phone, lastDive, numberOfDives, chestSize, showSize, height, certificates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > CreateCustomerWithHttpInfo (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CustomerApi->CreateCustomer");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling CustomerApi->CreateCustomer");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling CustomerApi->CreateCustomer");

            var localVarPath = "/customer/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (firstname != null) localVarQueryParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // query parameter
            if (lastname != null) localVarQueryParams.Add("lastname", Configuration.ApiClient.ParameterToString(lastname)); // query parameter
            if (birthday != null) localVarQueryParams.Add("birthday", Configuration.ApiClient.ParameterToString(birthday)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (address1 != null) localVarQueryParams.Add("address_1", Configuration.ApiClient.ParameterToString(address1)); // query parameter
            if (address2 != null) localVarQueryParams.Add("address_2", Configuration.ApiClient.ParameterToString(address2)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (county != null) localVarQueryParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // query parameter
            if (postcode != null) localVarQueryParams.Add("postcode", Configuration.ApiClient.ParameterToString(postcode)); // query parameter
            if (countryId != null) localVarQueryParams.Add("country_id", Configuration.ApiClient.ParameterToString(countryId)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (lastDive != null) localVarQueryParams.Add("last_dive", Configuration.ApiClient.ParameterToString(lastDive)); // query parameter
            if (numberOfDives != null) localVarQueryParams.Add("number_of_dives", Configuration.ApiClient.ParameterToString(numberOfDives)); // query parameter
            if (chestSize != null) localVarQueryParams.Add("chest_size", Configuration.ApiClient.ParameterToString(chestSize)); // query parameter
            if (showSize != null) localVarQueryParams.Add("show_size", Configuration.ApiClient.ParameterToString(showSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (certificates != null) localVarQueryParams.Add("certificates", Configuration.ApiClient.ParameterToString(certificates)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
            
        }

        /// <summary>
        /// Create a new customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> CreateCustomerAsync (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = await CreateCustomerAsyncWithHttpInfo(email, firstname, lastname, birthday, gender, address1, address2, city, county, postcode, countryId, phone, lastDive, numberOfDives, chestSize, showSize, height, certificates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new customer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="lastname"></param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> CreateCustomerAsyncWithHttpInfo (string email, string firstname, string lastname, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CustomerApi->CreateCustomer");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling CustomerApi->CreateCustomer");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling CustomerApi->CreateCustomer");

            var localVarPath = "/customer/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (firstname != null) localVarQueryParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // query parameter
            if (lastname != null) localVarQueryParams.Add("lastname", Configuration.ApiClient.ParameterToString(lastname)); // query parameter
            if (birthday != null) localVarQueryParams.Add("birthday", Configuration.ApiClient.ParameterToString(birthday)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (address1 != null) localVarQueryParams.Add("address_1", Configuration.ApiClient.ParameterToString(address1)); // query parameter
            if (address2 != null) localVarQueryParams.Add("address_2", Configuration.ApiClient.ParameterToString(address2)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (county != null) localVarQueryParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // query parameter
            if (postcode != null) localVarQueryParams.Add("postcode", Configuration.ApiClient.ParameterToString(postcode)); // query parameter
            if (countryId != null) localVarQueryParams.Add("country_id", Configuration.ApiClient.ParameterToString(countryId)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (lastDive != null) localVarQueryParams.Add("last_dive", Configuration.ApiClient.ParameterToString(lastDive)); // query parameter
            if (numberOfDives != null) localVarQueryParams.Add("number_of_dives", Configuration.ApiClient.ParameterToString(numberOfDives)); // query parameter
            if (chestSize != null) localVarQueryParams.Add("chest_size", Configuration.ApiClient.ParameterToString(chestSize)); // query parameter
            if (showSize != null) localVarQueryParams.Add("show_size", Configuration.ApiClient.ParameterToString(showSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (certificates != null) localVarQueryParams.Add("certificates", Configuration.ApiClient.ParameterToString(certificates)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
            
        }

        /// <summary>
        /// Delete a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeleteCustomer (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DeleteCustomerWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DeleteCustomerWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->DeleteCustomer");

            var localVarPath = "/customer/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Delete a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DeleteCustomerAsync (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DeleteCustomerAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteCustomerAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->DeleteCustomer");

            var localVarPath = "/customer/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 EditCustomer (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
             ApiResponse<InlineResponse20030> localVarResponse = EditCustomerWithHttpInfo(id, email, firstname, lastname, birthday, gender, address1, address2, city, county, postcode, countryId, phone, lastDive, numberOfDives, chestSize, showSize, height, certificates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse< InlineResponse20030 > EditCustomerWithHttpInfo (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->EditCustomer");

            var localVarPath = "/customer/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (firstname != null) localVarQueryParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // query parameter
            if (lastname != null) localVarQueryParams.Add("lastname", Configuration.ApiClient.ParameterToString(lastname)); // query parameter
            if (birthday != null) localVarQueryParams.Add("birthday", Configuration.ApiClient.ParameterToString(birthday)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (address1 != null) localVarQueryParams.Add("address_1", Configuration.ApiClient.ParameterToString(address1)); // query parameter
            if (address2 != null) localVarQueryParams.Add("address_2", Configuration.ApiClient.ParameterToString(address2)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (county != null) localVarQueryParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // query parameter
            if (postcode != null) localVarQueryParams.Add("postcode", Configuration.ApiClient.ParameterToString(postcode)); // query parameter
            if (countryId != null) localVarQueryParams.Add("country_id", Configuration.ApiClient.ParameterToString(countryId)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (lastDive != null) localVarQueryParams.Add("last_dive", Configuration.ApiClient.ParameterToString(lastDive)); // query parameter
            if (numberOfDives != null) localVarQueryParams.Add("number_of_dives", Configuration.ApiClient.ParameterToString(numberOfDives)); // query parameter
            if (chestSize != null) localVarQueryParams.Add("chest_size", Configuration.ApiClient.ParameterToString(chestSize)); // query parameter
            if (showSize != null) localVarQueryParams.Add("show_size", Configuration.ApiClient.ParameterToString(showSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (certificates != null) localVarQueryParams.Add("certificates", Configuration.ApiClient.ParameterToString(certificates)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20030) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
            
        }

        /// <summary>
        /// Update a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> EditCustomerAsync (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
             ApiResponse<InlineResponse20030> localVarResponse = await EditCustomerAsyncWithHttpInfo(id, email, firstname, lastname, birthday, gender, address1, address2, city, county, postcode, countryId, phone, lastDive, numberOfDives, chestSize, showSize, height, certificates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="email"> (optional)</param>
        /// <param name="firstname"> (optional)</param>
        /// <param name="lastname"> (optional)</param>
        /// <param name="birthday"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="phone"> (optional)</param>
        /// <param name="lastDive"> (optional)</param>
        /// <param name="numberOfDives"> (optional)</param>
        /// <param name="chestSize"> (optional)</param>
        /// <param name="showSize"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="certificates"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> EditCustomerAsyncWithHttpInfo (long? id, string email = null, string firstname = null, string lastname = null, DateTime? birthday = null, int? gender = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, string phone = null, DateTime? lastDive = null, int? numberOfDives = null, string chestSize = null, string showSize = null, string height = null, List<long?> certificates = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->EditCustomer");

            var localVarPath = "/customer/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (firstname != null) localVarQueryParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // query parameter
            if (lastname != null) localVarQueryParams.Add("lastname", Configuration.ApiClient.ParameterToString(lastname)); // query parameter
            if (birthday != null) localVarQueryParams.Add("birthday", Configuration.ApiClient.ParameterToString(birthday)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (address1 != null) localVarQueryParams.Add("address_1", Configuration.ApiClient.ParameterToString(address1)); // query parameter
            if (address2 != null) localVarQueryParams.Add("address_2", Configuration.ApiClient.ParameterToString(address2)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (county != null) localVarQueryParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // query parameter
            if (postcode != null) localVarQueryParams.Add("postcode", Configuration.ApiClient.ParameterToString(postcode)); // query parameter
            if (countryId != null) localVarQueryParams.Add("country_id", Configuration.ApiClient.ParameterToString(countryId)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (lastDive != null) localVarQueryParams.Add("last_dive", Configuration.ApiClient.ParameterToString(lastDive)); // query parameter
            if (numberOfDives != null) localVarQueryParams.Add("number_of_dives", Configuration.ApiClient.ParameterToString(numberOfDives)); // query parameter
            if (chestSize != null) localVarQueryParams.Add("chest_size", Configuration.ApiClient.ParameterToString(chestSize)); // query parameter
            if (showSize != null) localVarQueryParams.Add("show_size", Configuration.ApiClient.ParameterToString(showSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (certificates != null) localVarQueryParams.Add("certificates", Configuration.ApiClient.ParameterToString(certificates)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20030) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
            
        }

        /// <summary>
        /// Retrieve all customers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Customer&gt;</returns>
        public List<Customer> GetAllCustomers ()
        {
             ApiResponse<List<Customer>> localVarResponse = GetAllCustomersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all customers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        public ApiResponse< List<Customer> > GetAllCustomersWithHttpInfo ()
        {

            var localVarPath = "/customer/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Customer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Customer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Customer>)));
            
        }

        /// <summary>
        /// Retrieve all customers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Customer>> GetAllCustomersAsync ()
        {
             ApiResponse<List<Customer>> localVarResponse = await GetAllCustomersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all customers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Customer>>> GetAllCustomersAsyncWithHttpInfo ()
        {

            var localVarPath = "/customer/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Customer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Customer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Customer>)));
            
        }

        /// <summary>
        /// Retrieve a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetCustomer (long? id = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = GetCustomerWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > GetCustomerWithHttpInfo (long? id = null)
        {

            var localVarPath = "/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
            
        }

        /// <summary>
        /// Retrieve a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetCustomerAsync (long? id = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = await GetCustomerAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a customer by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetCustomerAsyncWithHttpInfo (long? id = null)
        {

            var localVarPath = "/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
            
        }

    }
}
