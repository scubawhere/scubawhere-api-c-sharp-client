/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 CreateSession (DateTime? start, long? boatId = null, long? tripId = null);

        /// <summary>
        /// Create a new session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> CreateSessionWithHttpInfo (DateTime? start, long? boatId = null, long? tripId = null);
        /// <summary>
        /// Delete a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeleteSession (long? id);

        /// <summary>
        /// Delete a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeleteSessionWithHttpInfo (long? id);
        /// <summary>
        /// Update a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 EditSession (long? id, DateTime? start, long? boatId = null);

        /// <summary>
        /// Update a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> EditSessionWithHttpInfo (long? id, DateTime? start, long? boatId = null);
        /// <summary>
        /// Retrieve all of tsessions that match a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 FilterSessions (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null);

        /// <summary>
        /// Retrieve all of tsessions that match a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> FilterSessionsWithHttpInfo (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null);
        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Session&gt;</returns>
        List<Session> GetAllSessions ();

        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Session&gt;</returns>
        ApiResponse<List<Session>> GetAllSessionsWithHttpInfo ();
        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Session&gt;</returns>
        List<Session> GetAllWithTrashedSessions ();

        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Session&gt;</returns>
        ApiResponse<List<Session>> GetAllWithTrashedSessionsWithHttpInfo ();
        /// <summary>
        /// Retrieve the customer manifest for this session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 GetManifest (long? id);

        /// <summary>
        /// Retrieve the customer manifest for this session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> GetManifestWithHttpInfo (long? id);
        /// <summary>
        /// Retrieve a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 GetSession (long? id = null);

        /// <summary>
        /// Retrieve a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> GetSessionWithHttpInfo (long? id = null);
        /// <summary>
        /// Retrieve all of todays sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 GetTodaySessions ();

        /// <summary>
        /// Retrieve all of todays sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> GetTodaySessionsWithHttpInfo ();
        /// <summary>
        /// Retrieve all of tommorows sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 GetTommorowSessions ();

        /// <summary>
        /// Retrieve all of tommorows sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> GetTommorowSessionsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> CreateSessionAsync (DateTime? start, long? boatId = null, long? tripId = null);

        /// <summary>
        /// Create a new session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> CreateSessionAsyncWithHttpInfo (DateTime? start, long? boatId = null, long? tripId = null);
        /// <summary>
        /// Delete a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeleteSessionAsync (long? id);

        /// <summary>
        /// Delete a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteSessionAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> EditSessionAsync (long? id, DateTime? start, long? boatId = null);

        /// <summary>
        /// Update a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> EditSessionAsyncWithHttpInfo (long? id, DateTime? start, long? boatId = null);
        /// <summary>
        /// Retrieve all of tsessions that match a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> FilterSessionsAsync (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null);

        /// <summary>
        /// Retrieve all of tsessions that match a filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> FilterSessionsAsyncWithHttpInfo (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null);
        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Session&gt;</returns>
        System.Threading.Tasks.Task<List<Session>> GetAllSessionsAsync ();

        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Session&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Session>>> GetAllSessionsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Session&gt;</returns>
        System.Threading.Tasks.Task<List<Session>> GetAllWithTrashedSessionsAsync ();

        /// <summary>
        /// Retrieve all sessions including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Session&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Session>>> GetAllWithTrashedSessionsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve the customer manifest for this session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> GetManifestAsync (long? id);

        /// <summary>
        /// Retrieve the customer manifest for this session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetManifestAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Retrieve a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> GetSessionAsync (long? id = null);

        /// <summary>
        /// Retrieve a session by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetSessionAsyncWithHttpInfo (long? id = null);
        /// <summary>
        /// Retrieve all of todays sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> GetTodaySessionsAsync ();

        /// <summary>
        /// Retrieve all of todays sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> GetTodaySessionsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all of tommorows sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> GetTommorowSessionsAsync ();

        /// <summary>
        /// Retrieve all of tommorows sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> GetTommorowSessionsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 CreateSession (DateTime? start, long? boatId = null, long? tripId = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = CreateSessionWithHttpInfo(start, boatId, tripId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse< InlineResponse20043 > CreateSessionWithHttpInfo (DateTime? start, long? boatId = null, long? tripId = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SessionApi->CreateSession");

            var localVarPath = "/session/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (boatId != null) localVarQueryParams.Add("boat_id", Configuration.ApiClient.ParameterToString(boatId)); // query parameter
            if (tripId != null) localVarQueryParams.Add("trip_id", Configuration.ApiClient.ParameterToString(tripId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
            
        }

        /// <summary>
        /// Create a new session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> CreateSessionAsync (DateTime? start, long? boatId = null, long? tripId = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = await CreateSessionAsyncWithHttpInfo(start, boatId, tripId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> CreateSessionAsyncWithHttpInfo (DateTime? start, long? boatId = null, long? tripId = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SessionApi->CreateSession");

            var localVarPath = "/session/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (boatId != null) localVarQueryParams.Add("boat_id", Configuration.ApiClient.ParameterToString(boatId)); // query parameter
            if (tripId != null) localVarQueryParams.Add("trip_id", Configuration.ApiClient.ParameterToString(tripId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
            
        }

        /// <summary>
        /// Delete a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeleteSession (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DeleteSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DeleteSessionWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->DeleteSession");

            var localVarPath = "/session/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Delete a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DeleteSessionAsync (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DeleteSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteSessionAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->DeleteSession");

            var localVarPath = "/session/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 EditSession (long? id, DateTime? start, long? boatId = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = EditSessionWithHttpInfo(id, start, boatId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse< InlineResponse20044 > EditSessionWithHttpInfo (long? id, DateTime? start, long? boatId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->EditSession");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SessionApi->EditSession");

            var localVarPath = "/session/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (boatId != null) localVarQueryParams.Add("boat_id", Configuration.ApiClient.ParameterToString(boatId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20044) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
            
        }

        /// <summary>
        /// Update a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044> EditSessionAsync (long? id, DateTime? start, long? boatId = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = await EditSessionAsyncWithHttpInfo(id, start, boatId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="start"></param>
        /// <param name="boatId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> EditSessionAsyncWithHttpInfo (long? id, DateTime? start, long? boatId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->EditSession");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SessionApi->EditSession");

            var localVarPath = "/session/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (boatId != null) localVarQueryParams.Add("boat_id", Configuration.ApiClient.ParameterToString(boatId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20044) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
            
        }

        /// <summary>
        /// Retrieve all of tsessions that match a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 FilterSessions (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null)
        {
             ApiResponse<InlineResponse20045> localVarResponse = FilterSessionsWithHttpInfo(after, before, tripId, ticketId, packageId, courseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all of tsessions that match a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse< InlineResponse20045 > FilterSessionsWithHttpInfo (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null)
        {

            var localVarPath = "/session/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter
            if (tripId != null) localVarQueryParams.Add("trip_id", Configuration.ApiClient.ParameterToString(tripId)); // query parameter
            if (ticketId != null) localVarQueryParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // query parameter
            if (packageId != null) localVarQueryParams.Add("package_id", Configuration.ApiClient.ParameterToString(packageId)); // query parameter
            if (courseId != null) localVarQueryParams.Add("course_id", Configuration.ApiClient.ParameterToString(courseId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
            
        }

        /// <summary>
        /// Retrieve all of tsessions that match a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> FilterSessionsAsync (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null)
        {
             ApiResponse<InlineResponse20045> localVarResponse = await FilterSessionsAsyncWithHttpInfo(after, before, tripId, ticketId, packageId, courseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all of tsessions that match a filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="tripId"> (optional)</param>
        /// <param name="ticketId"> (optional)</param>
        /// <param name="packageId"> (optional)</param>
        /// <param name="courseId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> FilterSessionsAsyncWithHttpInfo (DateTime? after = null, DateTime? before = null, long? tripId = null, long? ticketId = null, long? packageId = null, long? courseId = null)
        {

            var localVarPath = "/session/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter
            if (tripId != null) localVarQueryParams.Add("trip_id", Configuration.ApiClient.ParameterToString(tripId)); // query parameter
            if (ticketId != null) localVarQueryParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // query parameter
            if (packageId != null) localVarQueryParams.Add("package_id", Configuration.ApiClient.ParameterToString(packageId)); // query parameter
            if (courseId != null) localVarQueryParams.Add("course_id", Configuration.ApiClient.ParameterToString(courseId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
            
        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Session&gt;</returns>
        public List<Session> GetAllSessions ()
        {
             ApiResponse<List<Session>> localVarResponse = GetAllSessionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Session&gt;</returns>
        public ApiResponse< List<Session> > GetAllSessionsWithHttpInfo ()
        {

            var localVarPath = "/session/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Session>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Session>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Session>)));
            
        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Session&gt;</returns>
        public async System.Threading.Tasks.Task<List<Session>> GetAllSessionsAsync ()
        {
             ApiResponse<List<Session>> localVarResponse = await GetAllSessionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Session&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Session>>> GetAllSessionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/session/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Session>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Session>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Session>)));
            
        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Session&gt;</returns>
        public List<Session> GetAllWithTrashedSessions ()
        {
             ApiResponse<List<Session>> localVarResponse = GetAllWithTrashedSessionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Session&gt;</returns>
        public ApiResponse< List<Session> > GetAllWithTrashedSessionsWithHttpInfo ()
        {

            var localVarPath = "/session/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Session>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Session>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Session>)));
            
        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Session&gt;</returns>
        public async System.Threading.Tasks.Task<List<Session>> GetAllWithTrashedSessionsAsync ()
        {
             ApiResponse<List<Session>> localVarResponse = await GetAllWithTrashedSessionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all sessions including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Session&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Session>>> GetAllWithTrashedSessionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/session/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Session>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Session>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Session>)));
            
        }

        /// <summary>
        /// Retrieve the customer manifest for this session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 GetManifest (long? id)
        {
             ApiResponse<InlineResponse20043> localVarResponse = GetManifestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the customer manifest for this session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse< InlineResponse20043 > GetManifestWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->GetManifest");

            var localVarPath = "/session/manifest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
            
        }

        /// <summary>
        /// Retrieve the customer manifest for this session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> GetManifestAsync (long? id)
        {
             ApiResponse<InlineResponse20043> localVarResponse = await GetManifestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the customer manifest for this session 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetManifestAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->GetManifest");

            var localVarPath = "/session/manifest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
            
        }

        /// <summary>
        /// Retrieve a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 GetSession (long? id = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = GetSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse< InlineResponse20043 > GetSessionWithHttpInfo (long? id = null)
        {

            var localVarPath = "/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
            
        }

        /// <summary>
        /// Retrieve a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> GetSessionAsync (long? id = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = await GetSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a session by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetSessionAsyncWithHttpInfo (long? id = null)
        {

            var localVarPath = "/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
            
        }

        /// <summary>
        /// Retrieve all of todays sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 GetTodaySessions ()
        {
             ApiResponse<InlineResponse20045> localVarResponse = GetTodaySessionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all of todays sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse< InlineResponse20045 > GetTodaySessionsWithHttpInfo ()
        {

            var localVarPath = "/session/today";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTodaySessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
            
        }

        /// <summary>
        /// Retrieve all of todays sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> GetTodaySessionsAsync ()
        {
             ApiResponse<InlineResponse20045> localVarResponse = await GetTodaySessionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all of todays sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> GetTodaySessionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/session/today";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTodaySessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
            
        }

        /// <summary>
        /// Retrieve all of tommorows sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 GetTommorowSessions ()
        {
             ApiResponse<InlineResponse20045> localVarResponse = GetTommorowSessionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all of tommorows sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse< InlineResponse20045 > GetTommorowSessionsWithHttpInfo ()
        {

            var localVarPath = "/session/tommorow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTommorowSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
            
        }

        /// <summary>
        /// Retrieve all of tommorows sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> GetTommorowSessionsAsync ()
        {
             ApiResponse<InlineResponse20045> localVarResponse = await GetTommorowSessionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all of tommorows sessions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> GetTommorowSessionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/session/tommorow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTommorowSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
            
        }

    }
}
