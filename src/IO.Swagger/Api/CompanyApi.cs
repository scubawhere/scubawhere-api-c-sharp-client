/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attach a location to a company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 AttachLocations (string name = null, string description = null, float? latitude = null, float? longitude = null);

        /// <summary>
        /// Attach a location to a company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> AttachLocationsWithHttpInfo (string name = null, string description = null, float? latitude = null, float? longitude = null);
        /// <summary>
        /// Retrieve the locations this Dive Centre uses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetLocations (string latitude, string longitude, int? limit = null);

        /// <summary>
        /// Retrieve the locations this Dive Centre uses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetLocationsWithHttpInfo (string latitude, string longitude, int? limit = null);
        /// <summary>
        /// Retrieve the pick up schedule for a date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetPickupSchedule (string date);

        /// <summary>
        /// Retrieve the pick up schedule for a date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetPickupScheduleWithHttpInfo (string date);
        /// <summary>
        /// Update the companies information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 UpdateCompany (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null);

        /// <summary>
        /// Update the companies information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> UpdateCompanyWithHttpInfo (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Attach a location to a company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> AttachLocationsAsync (string name = null, string description = null, float? latitude = null, float? longitude = null);

        /// <summary>
        /// Attach a location to a company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> AttachLocationsAsyncWithHttpInfo (string name = null, string description = null, float? latitude = null, float? longitude = null);
        /// <summary>
        /// Retrieve the locations this Dive Centre uses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetLocationsAsync (string latitude, string longitude, int? limit = null);

        /// <summary>
        /// Retrieve the locations this Dive Centre uses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetLocationsAsyncWithHttpInfo (string latitude, string longitude, int? limit = null);
        /// <summary>
        /// Retrieve the pick up schedule for a date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetPickupScheduleAsync (string date);

        /// <summary>
        /// Retrieve the pick up schedule for a date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetPickupScheduleAsyncWithHttpInfo (string date);
        /// <summary>
        /// Update the companies information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> UpdateCompanyAsync (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null);

        /// <summary>
        /// Update the companies information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> UpdateCompanyAsyncWithHttpInfo (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompanyApi : ICompanyApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompanyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Attach a location to a company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 AttachLocations (string name = null, string description = null, float? latitude = null, float? longitude = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = AttachLocationsWithHttpInfo(name, description, latitude, longitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a location to a company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > AttachLocationsWithHttpInfo (string name = null, string description = null, float? latitude = null, float? longitude = null)
        {

            var localVarPath = "/company/add-location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
            
        }

        /// <summary>
        /// Attach a location to a company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> AttachLocationsAsync (string name = null, string description = null, float? latitude = null, float? longitude = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await AttachLocationsAsyncWithHttpInfo(name, description, latitude, longitude);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a location to a company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="longitude"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> AttachLocationsAsyncWithHttpInfo (string name = null, string description = null, float? latitude = null, float? longitude = null)
        {

            var localVarPath = "/company/add-location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
            
        }

        /// <summary>
        /// Retrieve the locations this Dive Centre uses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetLocations (string latitude, string longitude, int? limit = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = GetLocationsWithHttpInfo(latitude, longitude, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the locations this Dive Centre uses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > GetLocationsWithHttpInfo (string latitude, string longitude, int? limit = null)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling CompanyApi->GetLocations");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling CompanyApi->GetLocations");

            var localVarPath = "/company/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
            
        }

        /// <summary>
        /// Retrieve the locations this Dive Centre uses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GetLocationsAsync (string latitude, string longitude, int? limit = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await GetLocationsAsyncWithHttpInfo(latitude, longitude, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the locations this Dive Centre uses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetLocationsAsyncWithHttpInfo (string latitude, string longitude, int? limit = null)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling CompanyApi->GetLocations");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling CompanyApi->GetLocations");

            var localVarPath = "/company/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
            
        }

        /// <summary>
        /// Retrieve the pick up schedule for a date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetPickupSchedule (string date)
        {
             ApiResponse<InlineResponse20025> localVarResponse = GetPickupScheduleWithHttpInfo(date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the pick up schedule for a date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > GetPickupScheduleWithHttpInfo (string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CompanyApi->GetPickupSchedule");

            var localVarPath = "/company/pick-up-schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPickupSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
            
        }

        /// <summary>
        /// Retrieve the pick up schedule for a date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetPickupScheduleAsync (string date)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await GetPickupScheduleAsyncWithHttpInfo(date);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the pick up schedule for a date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetPickupScheduleAsyncWithHttpInfo (string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CompanyApi->GetPickupSchedule");

            var localVarPath = "/company/pick-up-schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPickupSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
            
        }

        /// <summary>
        /// Update the companies information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 UpdateCompany (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null)
        {
             ApiResponse<InlineResponse20026> localVarResponse = UpdateCompanyWithHttpInfo(id, contact, description, name, address1, address2, city, county, postcode, countryId, currencyId, businessPhone, businessEmail, vatNumber, registrationNumber, website);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the companies information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > UpdateCompanyWithHttpInfo (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CompanyApi->UpdateCompany");

            var localVarPath = "/company/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (contact != null) localVarQueryParams.Add("contact", Configuration.ApiClient.ParameterToString(contact)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (address1 != null) localVarQueryParams.Add("address_1", Configuration.ApiClient.ParameterToString(address1)); // query parameter
            if (address2 != null) localVarQueryParams.Add("address_2", Configuration.ApiClient.ParameterToString(address2)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (county != null) localVarQueryParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // query parameter
            if (postcode != null) localVarQueryParams.Add("postcode", Configuration.ApiClient.ParameterToString(postcode)); // query parameter
            if (countryId != null) localVarQueryParams.Add("country_id", Configuration.ApiClient.ParameterToString(countryId)); // query parameter
            if (currencyId != null) localVarQueryParams.Add("currency_id", Configuration.ApiClient.ParameterToString(currencyId)); // query parameter
            if (businessPhone != null) localVarQueryParams.Add("business_phone", Configuration.ApiClient.ParameterToString(businessPhone)); // query parameter
            if (businessEmail != null) localVarQueryParams.Add("business_email", Configuration.ApiClient.ParameterToString(businessEmail)); // query parameter
            if (vatNumber != null) localVarQueryParams.Add("vat_number", Configuration.ApiClient.ParameterToString(vatNumber)); // query parameter
            if (registrationNumber != null) localVarQueryParams.Add("registration_number", Configuration.ApiClient.ParameterToString(registrationNumber)); // query parameter
            if (website != null) localVarQueryParams.Add("website", Configuration.ApiClient.ParameterToString(website)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCompany", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
            
        }

        /// <summary>
        /// Update the companies information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> UpdateCompanyAsync (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await UpdateCompanyAsyncWithHttpInfo(id, contact, description, name, address1, address2, city, county, postcode, countryId, currencyId, businessPhone, businessEmail, vatNumber, registrationNumber, website);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the companies information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contact"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="address1"> (optional)</param>
        /// <param name="address2"> (optional)</param>
        /// <param name="city"> (optional)</param>
        /// <param name="county"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="businessPhone"> (optional)</param>
        /// <param name="businessEmail"> (optional)</param>
        /// <param name="vatNumber"> (optional)</param>
        /// <param name="registrationNumber"> (optional)</param>
        /// <param name="website"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> UpdateCompanyAsyncWithHttpInfo (long? id, string contact = null, string description = null, string name = null, string address1 = null, string address2 = null, string city = null, string county = null, string postcode = null, long? countryId = null, long? currencyId = null, string businessPhone = null, string businessEmail = null, string vatNumber = null, string registrationNumber = null, string website = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CompanyApi->UpdateCompany");

            var localVarPath = "/company/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (contact != null) localVarQueryParams.Add("contact", Configuration.ApiClient.ParameterToString(contact)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (address1 != null) localVarQueryParams.Add("address_1", Configuration.ApiClient.ParameterToString(address1)); // query parameter
            if (address2 != null) localVarQueryParams.Add("address_2", Configuration.ApiClient.ParameterToString(address2)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (county != null) localVarQueryParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // query parameter
            if (postcode != null) localVarQueryParams.Add("postcode", Configuration.ApiClient.ParameterToString(postcode)); // query parameter
            if (countryId != null) localVarQueryParams.Add("country_id", Configuration.ApiClient.ParameterToString(countryId)); // query parameter
            if (currencyId != null) localVarQueryParams.Add("currency_id", Configuration.ApiClient.ParameterToString(currencyId)); // query parameter
            if (businessPhone != null) localVarQueryParams.Add("business_phone", Configuration.ApiClient.ParameterToString(businessPhone)); // query parameter
            if (businessEmail != null) localVarQueryParams.Add("business_email", Configuration.ApiClient.ParameterToString(businessEmail)); // query parameter
            if (vatNumber != null) localVarQueryParams.Add("vat_number", Configuration.ApiClient.ParameterToString(vatNumber)); // query parameter
            if (registrationNumber != null) localVarQueryParams.Add("registration_number", Configuration.ApiClient.ParameterToString(registrationNumber)); // query parameter
            if (website != null) localVarQueryParams.Add("website", Configuration.ApiClient.ParameterToString(website)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCompany", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
            
        }

    }
}
