/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 CreatePackage (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);

        /// <summary>
        /// Create a new package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> CreatePackageWithHttpInfo (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);
        /// <summary>
        /// Delete a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeletePackage (long? id);

        /// <summary>
        /// Delete a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeletePackageWithHttpInfo (long? id);
        /// <summary>
        /// Update a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 EditPackage (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);

        /// <summary>
        /// Update a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> EditPackageWithHttpInfo (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);
        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Package&gt;</returns>
        List<Package> GetAllPackages ();

        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Package&gt;</returns>
        ApiResponse<List<Package>> GetAllPackagesWithHttpInfo ();
        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Package&gt;</returns>
        List<Package> GetAllWithTrashedPackages ();

        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Package&gt;</returns>
        ApiResponse<List<Package>> GetAllWithTrashedPackagesWithHttpInfo ();
        /// <summary>
        /// Retrieve a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetPackage (long? id = null);

        /// <summary>
        /// Retrieve a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetPackageWithHttpInfo (long? id = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> CreatePackageAsync (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);

        /// <summary>
        /// Create a new package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> CreatePackageAsyncWithHttpInfo (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);
        /// <summary>
        /// Delete a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeletePackageAsync (long? id);

        /// <summary>
        /// Delete a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeletePackageAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> EditPackageAsync (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);

        /// <summary>
        /// Update a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> EditPackageAsyncWithHttpInfo (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null);
        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Package&gt;</returns>
        System.Threading.Tasks.Task<List<Package>> GetAllPackagesAsync ();

        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Package&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Package>>> GetAllPackagesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Package&gt;</returns>
        System.Threading.Tasks.Task<List<Package>> GetAllWithTrashedPackagesAsync ();

        /// <summary>
        /// Retrieve all packages including any deleted models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Package&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Package>>> GetAllWithTrashedPackagesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetPackageAsync (long? id = null);

        /// <summary>
        /// Retrieve a package by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetPackageAsyncWithHttpInfo (long? id = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PackageApi : IPackageApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackageApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PackageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 CreatePackage (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = CreatePackageWithHttpInfo(name, description, availableFrom, availableUntil, tickets, courses, accommodations, addons, prices);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse< InlineResponse20032 > CreatePackageWithHttpInfo (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PackageApi->CreatePackage");

            var localVarPath = "/package/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (tickets != null) localVarQueryParams.Add("tickets", Configuration.ApiClient.ParameterToString(tickets)); // query parameter
            if (courses != null) localVarQueryParams.Add("courses", Configuration.ApiClient.ParameterToString(courses)); // query parameter
            if (accommodations != null) localVarQueryParams.Add("accommodations", Configuration.ApiClient.ParameterToString(accommodations)); // query parameter
            if (addons != null) localVarQueryParams.Add("addons", Configuration.ApiClient.ParameterToString(addons)); // query parameter
            if (prices != null) localVarQueryParams.Add("prices", Configuration.ApiClient.ParameterToString(prices)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
            
        }

        /// <summary>
        /// Create a new package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> CreatePackageAsync (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = await CreatePackageAsyncWithHttpInfo(name, description, availableFrom, availableUntil, tickets, courses, accommodations, addons, prices);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> CreatePackageAsyncWithHttpInfo (string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PackageApi->CreatePackage");

            var localVarPath = "/package/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (tickets != null) localVarQueryParams.Add("tickets", Configuration.ApiClient.ParameterToString(tickets)); // query parameter
            if (courses != null) localVarQueryParams.Add("courses", Configuration.ApiClient.ParameterToString(courses)); // query parameter
            if (accommodations != null) localVarQueryParams.Add("accommodations", Configuration.ApiClient.ParameterToString(accommodations)); // query parameter
            if (addons != null) localVarQueryParams.Add("addons", Configuration.ApiClient.ParameterToString(addons)); // query parameter
            if (prices != null) localVarQueryParams.Add("prices", Configuration.ApiClient.ParameterToString(prices)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
            
        }

        /// <summary>
        /// Delete a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeletePackage (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DeletePackageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DeletePackageWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PackageApi->DeletePackage");

            var localVarPath = "/package/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Delete a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DeletePackageAsync (long? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DeletePackageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeletePackageAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PackageApi->DeletePackage");

            var localVarPath = "/package/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 EditPackage (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = EditPackageWithHttpInfo(id, name, description, availableFrom, availableUntil, tickets, courses, accommodations, addons, prices);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse< InlineResponse20033 > EditPackageWithHttpInfo (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PackageApi->EditPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PackageApi->EditPackage");

            var localVarPath = "/package/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (tickets != null) localVarQueryParams.Add("tickets", Configuration.ApiClient.ParameterToString(tickets)); // query parameter
            if (courses != null) localVarQueryParams.Add("courses", Configuration.ApiClient.ParameterToString(courses)); // query parameter
            if (accommodations != null) localVarQueryParams.Add("accommodations", Configuration.ApiClient.ParameterToString(accommodations)); // query parameter
            if (addons != null) localVarQueryParams.Add("addons", Configuration.ApiClient.ParameterToString(addons)); // query parameter
            if (prices != null) localVarQueryParams.Add("prices", Configuration.ApiClient.ParameterToString(prices)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
            
        }

        /// <summary>
        /// Update a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> EditPackageAsync (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = await EditPackageAsyncWithHttpInfo(id, name, description, availableFrom, availableUntil, tickets, courses, accommodations, addons, prices);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="description"> (optional)</param>
        /// <param name="availableFrom"> (optional)</param>
        /// <param name="availableUntil"> (optional)</param>
        /// <param name="tickets"> (optional)</param>
        /// <param name="courses"> (optional)</param>
        /// <param name="accommodations"> (optional)</param>
        /// <param name="addons"> (optional)</param>
        /// <param name="prices"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> EditPackageAsyncWithHttpInfo (long? id, string name, string description = null, DateTime? availableFrom = null, DateTime? availableUntil = null, List<long?> tickets = null, List<long?> courses = null, List<long?> accommodations = null, List<long?> addons = null, List<long?> prices = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PackageApi->EditPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PackageApi->EditPackage");

            var localVarPath = "/package/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (availableFrom != null) localVarQueryParams.Add("available_from", Configuration.ApiClient.ParameterToString(availableFrom)); // query parameter
            if (availableUntil != null) localVarQueryParams.Add("available_until", Configuration.ApiClient.ParameterToString(availableUntil)); // query parameter
            if (tickets != null) localVarQueryParams.Add("tickets", Configuration.ApiClient.ParameterToString(tickets)); // query parameter
            if (courses != null) localVarQueryParams.Add("courses", Configuration.ApiClient.ParameterToString(courses)); // query parameter
            if (accommodations != null) localVarQueryParams.Add("accommodations", Configuration.ApiClient.ParameterToString(accommodations)); // query parameter
            if (addons != null) localVarQueryParams.Add("addons", Configuration.ApiClient.ParameterToString(addons)); // query parameter
            if (prices != null) localVarQueryParams.Add("prices", Configuration.ApiClient.ParameterToString(prices)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
            
        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Package&gt;</returns>
        public List<Package> GetAllPackages ()
        {
             ApiResponse<List<Package>> localVarResponse = GetAllPackagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Package&gt;</returns>
        public ApiResponse< List<Package> > GetAllPackagesWithHttpInfo ()
        {

            var localVarPath = "/package/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Package>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Package>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Package>)));
            
        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Package&gt;</returns>
        public async System.Threading.Tasks.Task<List<Package>> GetAllPackagesAsync ()
        {
             ApiResponse<List<Package>> localVarResponse = await GetAllPackagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Package&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Package>>> GetAllPackagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/package/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Package>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Package>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Package>)));
            
        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Package&gt;</returns>
        public List<Package> GetAllWithTrashedPackages ()
        {
             ApiResponse<List<Package>> localVarResponse = GetAllWithTrashedPackagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Package&gt;</returns>
        public ApiResponse< List<Package> > GetAllWithTrashedPackagesWithHttpInfo ()
        {

            var localVarPath = "/package/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedPackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Package>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Package>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Package>)));
            
        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Package&gt;</returns>
        public async System.Threading.Tasks.Task<List<Package>> GetAllWithTrashedPackagesAsync ()
        {
             ApiResponse<List<Package>> localVarResponse = await GetAllWithTrashedPackagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all packages including any deleted models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Package&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Package>>> GetAllWithTrashedPackagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/package/all-with-trashed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWithTrashedPackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Package>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Package>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Package>)));
            
        }

        /// <summary>
        /// Retrieve a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetPackage (long? id = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = GetPackageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse< InlineResponse20032 > GetPackageWithHttpInfo (long? id = null)
        {

            var localVarPath = "/package";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
            
        }

        /// <summary>
        /// Retrieve a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> GetPackageAsync (long? id = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = await GetPackageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a package by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetPackageAsyncWithHttpInfo (long? id = null)
        {

            var localVarPath = "/package";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
            
        }

    }
}
