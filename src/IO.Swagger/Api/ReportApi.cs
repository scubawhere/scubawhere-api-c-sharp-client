/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 GetRevenueStreamReport (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> GetRevenueStreamReportWithHttpInfo (DateTime? after, DateTime? before);
        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 GetSourcesReport (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> GetSourcesReportWithHttpInfo (DateTime? after, DateTime? before);
        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 GetTrainingUtilisationReport (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> GetTrainingUtilisationReportWithHttpInfo (DateTime? after, DateTime? before);
        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 GetUtilisationReport (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> GetUtilisationReportWithHttpInfo (DateTime? after, DateTime? before);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> GetRevenueStreamReportAsync (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetRevenueStreamReportAsyncWithHttpInfo (DateTime? after, DateTime? before);
        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> GetSourcesReportAsync (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetSourcesReportAsyncWithHttpInfo (DateTime? after, DateTime? before);
        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> GetTrainingUtilisationReportAsync (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetTrainingUtilisationReportAsyncWithHttpInfo (DateTime? after, DateTime? before);
        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> GetUtilisationReportAsync (DateTime? after, DateTime? before);

        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetUtilisationReportAsyncWithHttpInfo (DateTime? after, DateTime? before);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportApi : IReportApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 GetRevenueStreamReport (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20040> localVarResponse = GetRevenueStreamReportWithHttpInfo(after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse< InlineResponse20040 > GetRevenueStreamReportWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetRevenueStreamReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetRevenueStreamReport");

            var localVarPath = "/report/revenue-streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRevenueStreamReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20040) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
            
        }

        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> GetRevenueStreamReportAsync (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20040> localVarResponse = await GetRevenueStreamReportAsyncWithHttpInfo(after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetRevenueStreamReportAsyncWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetRevenueStreamReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetRevenueStreamReport");

            var localVarPath = "/report/revenue-streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRevenueStreamReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20040) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
            
        }

        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 GetSourcesReport (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20041> localVarResponse = GetSourcesReportWithHttpInfo(after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse< InlineResponse20041 > GetSourcesReportWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetSourcesReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetSourcesReport");

            var localVarPath = "/report/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSourcesReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
            
        }

        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> GetSourcesReportAsync (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20041> localVarResponse = await GetSourcesReportAsyncWithHttpInfo(after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report about the distribution of revenue between the diffrent source of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetSourcesReportAsyncWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetSourcesReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetSourcesReport");

            var localVarPath = "/report/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSourcesReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
            
        }

        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 GetTrainingUtilisationReport (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20042> localVarResponse = GetTrainingUtilisationReportWithHttpInfo(after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse< InlineResponse20042 > GetTrainingUtilisationReportWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetTrainingUtilisationReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetTrainingUtilisationReport");

            var localVarPath = "/report/training-utilisation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrainingUtilisationReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
            
        }

        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042> GetTrainingUtilisationReportAsync (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20042> localVarResponse = await GetTrainingUtilisationReportAsyncWithHttpInfo(after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report containing the utilisation of all classes between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetTrainingUtilisationReportAsyncWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetTrainingUtilisationReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetTrainingUtilisationReport");

            var localVarPath = "/report/training-utilisation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrainingUtilisationReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
            
        }

        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 GetUtilisationReport (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20042> localVarResponse = GetUtilisationReportWithHttpInfo(after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse< InlineResponse20042 > GetUtilisationReportWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetUtilisationReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetUtilisationReport");

            var localVarPath = "/report/utilisation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUtilisationReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
            
        }

        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042> GetUtilisationReportAsync (DateTime? after, DateTime? before)
        {
             ApiResponse<InlineResponse20042> localVarResponse = await GetUtilisationReportAsyncWithHttpInfo(after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report containing the utilisation of all trips between the specified dates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetUtilisationReportAsyncWithHttpInfo (DateTime? after, DateTime? before)
        {
            // verify the required parameter 'after' is set
            if (after == null)
                throw new ApiException(400, "Missing required parameter 'after' when calling ReportApi->GetUtilisationReport");
            // verify the required parameter 'before' is set
            if (before == null)
                throw new ApiException(400, "Missing required parameter 'before' when calling ReportApi->GetUtilisationReport");

            var localVarPath = "/report/utilisation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (before != null) localVarQueryParams.Add("before", Configuration.ApiClient.ParameterToString(before)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUtilisationReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
            
        }

    }
}
