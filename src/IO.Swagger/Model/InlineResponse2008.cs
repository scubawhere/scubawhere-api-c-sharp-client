/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2008
    /// </summary>
    [DataContract]
    public partial class InlineResponse2008 :  IEquatable<InlineResponse2008>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2008" /> class.
        /// </summary>
        /// <param name="Status">Status.</param>
        /// <param name="DecimalPrice">DecimalPrice.</param>
        /// <param name="AccommodationDecimalPrice">AccommodationDecimalPrice.</param>
        /// <param name="PackageafacdeId">PackageafacdeId.</param>
        public InlineResponse2008(string Status = null, string DecimalPrice = null, string AccommodationDecimalPrice = null, long? PackageafacdeId = null)
        {
            this.Status = Status;
            this.DecimalPrice = DecimalPrice;
            this.AccommodationDecimalPrice = AccommodationDecimalPrice;
            this.PackageafacdeId = PackageafacdeId;
        }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets DecimalPrice
        /// </summary>
        [DataMember(Name="decimal_price", EmitDefaultValue=false)]
        public string DecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets AccommodationDecimalPrice
        /// </summary>
        [DataMember(Name="accommodation_decimal_price", EmitDefaultValue=false)]
        public string AccommodationDecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets PackageafacdeId
        /// </summary>
        [DataMember(Name="packageafacde_id", EmitDefaultValue=false)]
        public long? PackageafacdeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2008 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DecimalPrice: ").Append(DecimalPrice).Append("\n");
            sb.Append("  AccommodationDecimalPrice: ").Append(AccommodationDecimalPrice).Append("\n");
            sb.Append("  PackageafacdeId: ").Append(PackageafacdeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2008);
        }

        /// <summary>
        /// Returns true if InlineResponse2008 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2008 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2008 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.DecimalPrice == other.DecimalPrice ||
                    this.DecimalPrice != null &&
                    this.DecimalPrice.Equals(other.DecimalPrice)
                ) && 
                (
                    this.AccommodationDecimalPrice == other.AccommodationDecimalPrice ||
                    this.AccommodationDecimalPrice != null &&
                    this.AccommodationDecimalPrice.Equals(other.AccommodationDecimalPrice)
                ) && 
                (
                    this.PackageafacdeId == other.PackageafacdeId ||
                    this.PackageafacdeId != null &&
                    this.PackageafacdeId.Equals(other.PackageafacdeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.DecimalPrice != null)
                    hash = hash * 59 + this.DecimalPrice.GetHashCode();
                if (this.AccommodationDecimalPrice != null)
                    hash = hash * 59 + this.AccommodationDecimalPrice.GetHashCode();
                if (this.PackageafacdeId != null)
                    hash = hash * 59 + this.PackageafacdeId.GetHashCode();
                return hash;
            }
        }
    }

}
