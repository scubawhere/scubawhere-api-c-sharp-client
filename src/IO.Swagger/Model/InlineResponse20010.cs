/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20010
    /// </summary>
    [DataContract]
    public partial class InlineResponse20010 :  IEquatable<InlineResponse20010>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20010" /> class.
        /// </summary>
        /// <param name="Status">Status.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Addons">Addons.</param>
        /// <param name="DecimalPrice">DecimalPrice.</param>
        /// <param name="BoatroomId">BoatroomId.</param>
        /// <param name="PackageDecimalPrice">PackageDecimalPrice.</param>
        /// <param name="CourseDecimalPrice">CourseDecimalPrice.</param>
        /// <param name="TicketDecimalPrice">TicketDecimalPrice.</param>
        /// <param name="PackagefacadeId">PackagefacadeId.</param>
        public InlineResponse20010(string Status = null, long? Id = null, List<Addon> Addons = null, string DecimalPrice = null, long? BoatroomId = null, string PackageDecimalPrice = null, string CourseDecimalPrice = null, string TicketDecimalPrice = null, string PackagefacadeId = null)
        {
            this.Status = Status;
            this.Id = Id;
            this.Addons = Addons;
            this.DecimalPrice = DecimalPrice;
            this.BoatroomId = BoatroomId;
            this.PackageDecimalPrice = PackageDecimalPrice;
            this.CourseDecimalPrice = CourseDecimalPrice;
            this.TicketDecimalPrice = TicketDecimalPrice;
            this.PackagefacadeId = PackagefacadeId;
        }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Addons
        /// </summary>
        [DataMember(Name="addons", EmitDefaultValue=false)]
        public List<Addon> Addons { get; set; }
        /// <summary>
        /// Gets or Sets DecimalPrice
        /// </summary>
        [DataMember(Name="decimal_price", EmitDefaultValue=false)]
        public string DecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets BoatroomId
        /// </summary>
        [DataMember(Name="boatroom_id", EmitDefaultValue=false)]
        public long? BoatroomId { get; set; }
        /// <summary>
        /// Gets or Sets PackageDecimalPrice
        /// </summary>
        [DataMember(Name="package_decimal_price", EmitDefaultValue=false)]
        public string PackageDecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets CourseDecimalPrice
        /// </summary>
        [DataMember(Name="course_decimal_price", EmitDefaultValue=false)]
        public string CourseDecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets TicketDecimalPrice
        /// </summary>
        [DataMember(Name="ticket_decimal_price", EmitDefaultValue=false)]
        public string TicketDecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets PackagefacadeId
        /// </summary>
        [DataMember(Name="packagefacade_id", EmitDefaultValue=false)]
        public string PackagefacadeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20010 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Addons: ").Append(Addons).Append("\n");
            sb.Append("  DecimalPrice: ").Append(DecimalPrice).Append("\n");
            sb.Append("  BoatroomId: ").Append(BoatroomId).Append("\n");
            sb.Append("  PackageDecimalPrice: ").Append(PackageDecimalPrice).Append("\n");
            sb.Append("  CourseDecimalPrice: ").Append(CourseDecimalPrice).Append("\n");
            sb.Append("  TicketDecimalPrice: ").Append(TicketDecimalPrice).Append("\n");
            sb.Append("  PackagefacadeId: ").Append(PackagefacadeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse20010);
        }

        /// <summary>
        /// Returns true if InlineResponse20010 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20010 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Addons == other.Addons ||
                    this.Addons != null &&
                    this.Addons.SequenceEqual(other.Addons)
                ) && 
                (
                    this.DecimalPrice == other.DecimalPrice ||
                    this.DecimalPrice != null &&
                    this.DecimalPrice.Equals(other.DecimalPrice)
                ) && 
                (
                    this.BoatroomId == other.BoatroomId ||
                    this.BoatroomId != null &&
                    this.BoatroomId.Equals(other.BoatroomId)
                ) && 
                (
                    this.PackageDecimalPrice == other.PackageDecimalPrice ||
                    this.PackageDecimalPrice != null &&
                    this.PackageDecimalPrice.Equals(other.PackageDecimalPrice)
                ) && 
                (
                    this.CourseDecimalPrice == other.CourseDecimalPrice ||
                    this.CourseDecimalPrice != null &&
                    this.CourseDecimalPrice.Equals(other.CourseDecimalPrice)
                ) && 
                (
                    this.TicketDecimalPrice == other.TicketDecimalPrice ||
                    this.TicketDecimalPrice != null &&
                    this.TicketDecimalPrice.Equals(other.TicketDecimalPrice)
                ) && 
                (
                    this.PackagefacadeId == other.PackagefacadeId ||
                    this.PackagefacadeId != null &&
                    this.PackagefacadeId.Equals(other.PackagefacadeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Addons != null)
                    hash = hash * 59 + this.Addons.GetHashCode();
                if (this.DecimalPrice != null)
                    hash = hash * 59 + this.DecimalPrice.GetHashCode();
                if (this.BoatroomId != null)
                    hash = hash * 59 + this.BoatroomId.GetHashCode();
                if (this.PackageDecimalPrice != null)
                    hash = hash * 59 + this.PackageDecimalPrice.GetHashCode();
                if (this.CourseDecimalPrice != null)
                    hash = hash * 59 + this.CourseDecimalPrice.GetHashCode();
                if (this.TicketDecimalPrice != null)
                    hash = hash * 59 + this.TicketDecimalPrice.GetHashCode();
                if (this.PackagefacadeId != null)
                    hash = hash * 59 + this.PackagefacadeId.GetHashCode();
                return hash;
            }
        }
    }

}
