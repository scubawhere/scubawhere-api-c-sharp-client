/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Session
    /// </summary>
    [DataContract]
    public partial class Session :  IEquatable<Session>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Session" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Trip">Trip.</param>
        /// <param name="Start">Start.</param>
        /// <param name="Boat">Boat.</param>
        /// <param name="TimetableId">TimetableId.</param>
        public Session(long? Id = null, Trip Trip = null, DateTime? Start = null, Boat Boat = null, long? TimetableId = null)
        {
            this.Id = Id;
            this.Trip = Trip;
            this.Start = Start;
            this.Boat = Boat;
            this.TimetableId = TimetableId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Trip
        /// </summary>
        [DataMember(Name="trip", EmitDefaultValue=false)]
        public Trip Trip { get; set; }
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }
        /// <summary>
        /// Gets or Sets Boat
        /// </summary>
        [DataMember(Name="boat", EmitDefaultValue=false)]
        public Boat Boat { get; set; }
        /// <summary>
        /// Gets or Sets TimetableId
        /// </summary>
        [DataMember(Name="timetable_id", EmitDefaultValue=false)]
        public long? TimetableId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Trip: ").Append(Trip).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Boat: ").Append(Boat).Append("\n");
            sb.Append("  TimetableId: ").Append(TimetableId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Session);
        }

        /// <summary>
        /// Returns true if Session instances are equal
        /// </summary>
        /// <param name="other">Instance of Session to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Session other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Trip == other.Trip ||
                    this.Trip != null &&
                    this.Trip.Equals(other.Trip)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.Boat == other.Boat ||
                    this.Boat != null &&
                    this.Boat.Equals(other.Boat)
                ) && 
                (
                    this.TimetableId == other.TimetableId ||
                    this.TimetableId != null &&
                    this.TimetableId.Equals(other.TimetableId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Trip != null)
                    hash = hash * 59 + this.Trip.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.Boat != null)
                    hash = hash * 59 + this.Boat.GetHashCode();
                if (this.TimetableId != null)
                    hash = hash * 59 + this.TimetableId.GetHashCode();
                return hash;
            }
        }
    }

}
