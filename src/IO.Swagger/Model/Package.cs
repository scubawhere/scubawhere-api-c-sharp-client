/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Package
    /// </summary>
    [DataContract]
    public partial class Package :  IEquatable<Package>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="AvailableFrom">AvailableFrom.</param>
        /// <param name="AvailableUntil">AvailableUntil.</param>
        /// <param name="DecimalPrice">DecimalPrice.</param>
        /// <param name="Trips">Trips.</param>
        /// <param name="Courses">Courses.</param>
        /// <param name="Accommodations">Accommodations.</param>
        public Package(long? Id = null, string Name = null, string Description = null, DateTime? AvailableFrom = null, DateTime? AvailableUntil = null, string DecimalPrice = null, List<Ticket> Trips = null, List<Course> Courses = null, List<Accommodation> Accommodations = null)
        {
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.AvailableFrom = AvailableFrom;
            this.AvailableUntil = AvailableUntil;
            this.DecimalPrice = DecimalPrice;
            this.Trips = Trips;
            this.Courses = Courses;
            this.Accommodations = Accommodations;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets AvailableFrom
        /// </summary>
        [DataMember(Name="available_from", EmitDefaultValue=false)]
        public DateTime? AvailableFrom { get; set; }
        /// <summary>
        /// Gets or Sets AvailableUntil
        /// </summary>
        [DataMember(Name="available_until", EmitDefaultValue=false)]
        public DateTime? AvailableUntil { get; set; }
        /// <summary>
        /// Gets or Sets DecimalPrice
        /// </summary>
        [DataMember(Name="decimal_price", EmitDefaultValue=false)]
        public string DecimalPrice { get; set; }
        /// <summary>
        /// Gets or Sets Trips
        /// </summary>
        [DataMember(Name="trips", EmitDefaultValue=false)]
        public List<Ticket> Trips { get; set; }
        /// <summary>
        /// Gets or Sets Courses
        /// </summary>
        [DataMember(Name="courses", EmitDefaultValue=false)]
        public List<Course> Courses { get; set; }
        /// <summary>
        /// Gets or Sets Accommodations
        /// </summary>
        [DataMember(Name="accommodations", EmitDefaultValue=false)]
        public List<Accommodation> Accommodations { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AvailableFrom: ").Append(AvailableFrom).Append("\n");
            sb.Append("  AvailableUntil: ").Append(AvailableUntil).Append("\n");
            sb.Append("  DecimalPrice: ").Append(DecimalPrice).Append("\n");
            sb.Append("  Trips: ").Append(Trips).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("  Accommodations: ").Append(Accommodations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Package);
        }

        /// <summary>
        /// Returns true if Package instances are equal
        /// </summary>
        /// <param name="other">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.AvailableFrom == other.AvailableFrom ||
                    this.AvailableFrom != null &&
                    this.AvailableFrom.Equals(other.AvailableFrom)
                ) && 
                (
                    this.AvailableUntil == other.AvailableUntil ||
                    this.AvailableUntil != null &&
                    this.AvailableUntil.Equals(other.AvailableUntil)
                ) && 
                (
                    this.DecimalPrice == other.DecimalPrice ||
                    this.DecimalPrice != null &&
                    this.DecimalPrice.Equals(other.DecimalPrice)
                ) && 
                (
                    this.Trips == other.Trips ||
                    this.Trips != null &&
                    this.Trips.SequenceEqual(other.Trips)
                ) && 
                (
                    this.Courses == other.Courses ||
                    this.Courses != null &&
                    this.Courses.SequenceEqual(other.Courses)
                ) && 
                (
                    this.Accommodations == other.Accommodations ||
                    this.Accommodations != null &&
                    this.Accommodations.SequenceEqual(other.Accommodations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.AvailableFrom != null)
                    hash = hash * 59 + this.AvailableFrom.GetHashCode();
                if (this.AvailableUntil != null)
                    hash = hash * 59 + this.AvailableUntil.GetHashCode();
                if (this.DecimalPrice != null)
                    hash = hash * 59 + this.DecimalPrice.GetHashCode();
                if (this.Trips != null)
                    hash = hash * 59 + this.Trips.GetHashCode();
                if (this.Courses != null)
                    hash = hash * 59 + this.Courses.GetHashCode();
                if (this.Accommodations != null)
                    hash = hash * 59 + this.Accommodations.GetHashCode();
                return hash;
            }
        }
    }

}
