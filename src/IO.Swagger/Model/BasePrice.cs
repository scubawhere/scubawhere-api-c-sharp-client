/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BasePrice
    /// </summary>
    [DataContract]
    public partial class BasePrice :  IEquatable<BasePrice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasePrice" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="OwnerId">OwnerId.</param>
        /// <param name="OwnerType">OwnerType.</param>
        /// <param name="Price">Price.</param>
        /// <param name="From">From.</param>
        /// <param name="Until">Until.</param>
        /// <param name="DecimalPrice">DecimalPrice.</param>
        public BasePrice(long? Id = null, long? OwnerId = null, string OwnerType = null, long? Price = null, DateTime? From = null, DateTime? Until = null, long? DecimalPrice = null)
        {
            this.Id = Id;
            this.OwnerId = OwnerId;
            this.OwnerType = OwnerType;
            this.Price = Price;
            this.From = From;
            this.Until = Until;
            this.DecimalPrice = DecimalPrice;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public long? OwnerId { get; set; }
        /// <summary>
        /// Gets or Sets OwnerType
        /// </summary>
        [DataMember(Name="owner_type", EmitDefaultValue=false)]
        public string OwnerType { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public long? Price { get; set; }
        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public DateTime? From { get; set; }
        /// <summary>
        /// Gets or Sets Until
        /// </summary>
        [DataMember(Name="until", EmitDefaultValue=false)]
        public DateTime? Until { get; set; }
        /// <summary>
        /// Gets or Sets DecimalPrice
        /// </summary>
        [DataMember(Name="decimal_price", EmitDefaultValue=false)]
        public long? DecimalPrice { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasePrice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Until: ").Append(Until).Append("\n");
            sb.Append("  DecimalPrice: ").Append(DecimalPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BasePrice);
        }

        /// <summary>
        /// Returns true if BasePrice instances are equal
        /// </summary>
        /// <param name="other">Instance of BasePrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasePrice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OwnerId == other.OwnerId ||
                    this.OwnerId != null &&
                    this.OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    this.OwnerType == other.OwnerType ||
                    this.OwnerType != null &&
                    this.OwnerType.Equals(other.OwnerType)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.Until == other.Until ||
                    this.Until != null &&
                    this.Until.Equals(other.Until)
                ) && 
                (
                    this.DecimalPrice == other.DecimalPrice ||
                    this.DecimalPrice != null &&
                    this.DecimalPrice.Equals(other.DecimalPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OwnerId != null)
                    hash = hash * 59 + this.OwnerId.GetHashCode();
                if (this.OwnerType != null)
                    hash = hash * 59 + this.OwnerType.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.Until != null)
                    hash = hash * 59 + this.Until.GetHashCode();
                if (this.DecimalPrice != null)
                    hash = hash * 59 + this.DecimalPrice.GetHashCode();
                return hash;
            }
        }
    }

}
