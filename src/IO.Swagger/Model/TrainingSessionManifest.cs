/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrainingSessionManifest
    /// </summary>
    [DataContract]
    public partial class TrainingSessionManifest :  IEquatable<TrainingSessionManifest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainingSessionManifest" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="TrainingId">TrainingId.</param>
        /// <param name="Start">Start.</param>
        /// <param name="ScheduleId">ScheduleId.</param>
        /// <param name="Customers">Customers.</param>
        /// <param name="Capacity">Capacity.</param>
        public TrainingSessionManifest(long? Id = null, long? TrainingId = null, DateTime? Start = null, long? ScheduleId = null, List<Customer> Customers = null, TrainingSessionManifestCapacity Capacity = null)
        {
            this.Id = Id;
            this.TrainingId = TrainingId;
            this.Start = Start;
            this.ScheduleId = ScheduleId;
            this.Customers = Customers;
            this.Capacity = Capacity;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets TrainingId
        /// </summary>
        [DataMember(Name="training_id", EmitDefaultValue=false)]
        public long? TrainingId { get; set; }
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }
        /// <summary>
        /// Gets or Sets ScheduleId
        /// </summary>
        [DataMember(Name="schedule_id", EmitDefaultValue=false)]
        public long? ScheduleId { get; set; }
        /// <summary>
        /// Gets or Sets Customers
        /// </summary>
        [DataMember(Name="customers", EmitDefaultValue=false)]
        public List<Customer> Customers { get; set; }
        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public TrainingSessionManifestCapacity Capacity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrainingSessionManifest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TrainingId: ").Append(TrainingId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  Customers: ").Append(Customers).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrainingSessionManifest);
        }

        /// <summary>
        /// Returns true if TrainingSessionManifest instances are equal
        /// </summary>
        /// <param name="other">Instance of TrainingSessionManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrainingSessionManifest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TrainingId == other.TrainingId ||
                    this.TrainingId != null &&
                    this.TrainingId.Equals(other.TrainingId)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.ScheduleId == other.ScheduleId ||
                    this.ScheduleId != null &&
                    this.ScheduleId.Equals(other.ScheduleId)
                ) && 
                (
                    this.Customers == other.Customers ||
                    this.Customers != null &&
                    this.Customers.SequenceEqual(other.Customers)
                ) && 
                (
                    this.Capacity == other.Capacity ||
                    this.Capacity != null &&
                    this.Capacity.Equals(other.Capacity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TrainingId != null)
                    hash = hash * 59 + this.TrainingId.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.ScheduleId != null)
                    hash = hash * 59 + this.ScheduleId.GetHashCode();
                if (this.Customers != null)
                    hash = hash * 59 + this.Customers.GetHashCode();
                if (this.Capacity != null)
                    hash = hash * 59 + this.Capacity.GetHashCode();
                return hash;
            }
        }
    }

}
