/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract]
    public partial class Payment :  IEquatable<Payment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="BookingId">BookingId.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="CurrencyId">CurrencyId.</param>
        /// <param name="PaymentGatewayId">PaymentGatewayId.</param>
        /// <param name="ReceivedAt">ReceivedAt.</param>
        /// <param name="PaymentGateway">PaymentGateway.</param>
        /// <param name="Currency">Currency.</param>
        public Payment(long? Id = null, long? BookingId = null, string Amount = null, long? CurrencyId = null, long? PaymentGatewayId = null, DateTime? ReceivedAt = null, PaymentGateway PaymentGateway = null, Currency Currency = null)
        {
            this.Id = Id;
            this.BookingId = BookingId;
            this.Amount = Amount;
            this.CurrencyId = CurrencyId;
            this.PaymentGatewayId = PaymentGatewayId;
            this.ReceivedAt = ReceivedAt;
            this.PaymentGateway = PaymentGateway;
            this.Currency = Currency;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets BookingId
        /// </summary>
        [DataMember(Name="booking_id", EmitDefaultValue=false)]
        public long? BookingId { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="currency_id", EmitDefaultValue=false)]
        public long? CurrencyId { get; set; }
        /// <summary>
        /// Gets or Sets PaymentGatewayId
        /// </summary>
        [DataMember(Name="payment_gateway_id", EmitDefaultValue=false)]
        public long? PaymentGatewayId { get; set; }
        /// <summary>
        /// Gets or Sets ReceivedAt
        /// </summary>
        [DataMember(Name="received_at", EmitDefaultValue=false)]
        public DateTime? ReceivedAt { get; set; }
        /// <summary>
        /// Gets or Sets PaymentGateway
        /// </summary>
        [DataMember(Name="payment_gateway", EmitDefaultValue=false)]
        public PaymentGateway PaymentGateway { get; set; }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public Currency Currency { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  PaymentGateway: ").Append(PaymentGateway).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.BookingId == other.BookingId ||
                    this.BookingId != null &&
                    this.BookingId.Equals(other.BookingId)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.CurrencyId == other.CurrencyId ||
                    this.CurrencyId != null &&
                    this.CurrencyId.Equals(other.CurrencyId)
                ) && 
                (
                    this.PaymentGatewayId == other.PaymentGatewayId ||
                    this.PaymentGatewayId != null &&
                    this.PaymentGatewayId.Equals(other.PaymentGatewayId)
                ) && 
                (
                    this.ReceivedAt == other.ReceivedAt ||
                    this.ReceivedAt != null &&
                    this.ReceivedAt.Equals(other.ReceivedAt)
                ) && 
                (
                    this.PaymentGateway == other.PaymentGateway ||
                    this.PaymentGateway != null &&
                    this.PaymentGateway.Equals(other.PaymentGateway)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.BookingId != null)
                    hash = hash * 59 + this.BookingId.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.CurrencyId != null)
                    hash = hash * 59 + this.CurrencyId.GetHashCode();
                if (this.PaymentGatewayId != null)
                    hash = hash * 59 + this.PaymentGatewayId.GetHashCode();
                if (this.ReceivedAt != null)
                    hash = hash * 59 + this.ReceivedAt.GetHashCode();
                if (this.PaymentGateway != null)
                    hash = hash * 59 + this.PaymentGateway.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                return hash;
            }
        }
    }

}
