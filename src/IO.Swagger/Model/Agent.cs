/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Agent
    /// </summary>
    [DataContract]
    public partial class Agent :  IEquatable<Agent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Agent" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Website">Website.</param>
        /// <param name="BranchName">BranchName.</param>
        /// <param name="BranchAddress">BranchAddress.</param>
        /// <param name="BranchPhone">BranchPhone.</param>
        /// <param name="BranchEmail">BranchEmail.</param>
        /// <param name="BillingAddress">BillingAddress.</param>
        /// <param name="BillingPhone">BillingPhone.</param>
        /// <param name="BillingEmail">BillingEmail.</param>
        /// <param name="Commission">Commission.</param>
        /// <param name="Terms">Terms.</param>
        public Agent(long? Id = null, string Name = null, string Website = null, string BranchName = null, string BranchAddress = null, string BranchPhone = null, string BranchEmail = null, string BillingAddress = null, string BillingPhone = null, string BillingEmail = null, double? Commission = null, string Terms = null)
        {
            this.Id = Id;
            this.Name = Name;
            this.Website = Website;
            this.BranchName = BranchName;
            this.BranchAddress = BranchAddress;
            this.BranchPhone = BranchPhone;
            this.BranchEmail = BranchEmail;
            this.BillingAddress = BillingAddress;
            this.BillingPhone = BillingPhone;
            this.BillingEmail = BillingEmail;
            this.Commission = Commission;
            this.Terms = Terms;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }
        /// <summary>
        /// Gets or Sets BranchName
        /// </summary>
        [DataMember(Name="branch_name", EmitDefaultValue=false)]
        public string BranchName { get; set; }
        /// <summary>
        /// Gets or Sets BranchAddress
        /// </summary>
        [DataMember(Name="branch_address", EmitDefaultValue=false)]
        public string BranchAddress { get; set; }
        /// <summary>
        /// Gets or Sets BranchPhone
        /// </summary>
        [DataMember(Name="branch_phone", EmitDefaultValue=false)]
        public string BranchPhone { get; set; }
        /// <summary>
        /// Gets or Sets BranchEmail
        /// </summary>
        [DataMember(Name="branch_email", EmitDefaultValue=false)]
        public string BranchEmail { get; set; }
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billing_address", EmitDefaultValue=false)]
        public string BillingAddress { get; set; }
        /// <summary>
        /// Gets or Sets BillingPhone
        /// </summary>
        [DataMember(Name="billing_phone", EmitDefaultValue=false)]
        public string BillingPhone { get; set; }
        /// <summary>
        /// Gets or Sets BillingEmail
        /// </summary>
        [DataMember(Name="billing_email", EmitDefaultValue=false)]
        public string BillingEmail { get; set; }
        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double? Commission { get; set; }
        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Agent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  BranchAddress: ").Append(BranchAddress).Append("\n");
            sb.Append("  BranchPhone: ").Append(BranchPhone).Append("\n");
            sb.Append("  BranchEmail: ").Append(BranchEmail).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BillingPhone: ").Append(BillingPhone).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Agent);
        }

        /// <summary>
        /// Returns true if Agent instances are equal
        /// </summary>
        /// <param name="other">Instance of Agent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Agent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Website == other.Website ||
                    this.Website != null &&
                    this.Website.Equals(other.Website)
                ) && 
                (
                    this.BranchName == other.BranchName ||
                    this.BranchName != null &&
                    this.BranchName.Equals(other.BranchName)
                ) && 
                (
                    this.BranchAddress == other.BranchAddress ||
                    this.BranchAddress != null &&
                    this.BranchAddress.Equals(other.BranchAddress)
                ) && 
                (
                    this.BranchPhone == other.BranchPhone ||
                    this.BranchPhone != null &&
                    this.BranchPhone.Equals(other.BranchPhone)
                ) && 
                (
                    this.BranchEmail == other.BranchEmail ||
                    this.BranchEmail != null &&
                    this.BranchEmail.Equals(other.BranchEmail)
                ) && 
                (
                    this.BillingAddress == other.BillingAddress ||
                    this.BillingAddress != null &&
                    this.BillingAddress.Equals(other.BillingAddress)
                ) && 
                (
                    this.BillingPhone == other.BillingPhone ||
                    this.BillingPhone != null &&
                    this.BillingPhone.Equals(other.BillingPhone)
                ) && 
                (
                    this.BillingEmail == other.BillingEmail ||
                    this.BillingEmail != null &&
                    this.BillingEmail.Equals(other.BillingEmail)
                ) && 
                (
                    this.Commission == other.Commission ||
                    this.Commission != null &&
                    this.Commission.Equals(other.Commission)
                ) && 
                (
                    this.Terms == other.Terms ||
                    this.Terms != null &&
                    this.Terms.Equals(other.Terms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Website != null)
                    hash = hash * 59 + this.Website.GetHashCode();
                if (this.BranchName != null)
                    hash = hash * 59 + this.BranchName.GetHashCode();
                if (this.BranchAddress != null)
                    hash = hash * 59 + this.BranchAddress.GetHashCode();
                if (this.BranchPhone != null)
                    hash = hash * 59 + this.BranchPhone.GetHashCode();
                if (this.BranchEmail != null)
                    hash = hash * 59 + this.BranchEmail.GetHashCode();
                if (this.BillingAddress != null)
                    hash = hash * 59 + this.BillingAddress.GetHashCode();
                if (this.BillingPhone != null)
                    hash = hash * 59 + this.BillingPhone.GetHashCode();
                if (this.BillingEmail != null)
                    hash = hash * 59 + this.BillingEmail.GetHashCode();
                if (this.Commission != null)
                    hash = hash * 59 + this.Commission.GetHashCode();
                if (this.Terms != null)
                    hash = hash * 59 + this.Terms.GetHashCode();
                return hash;
            }
        }
    }

}
