/* 
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PackageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PackageApiTests
    {
        private PackageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PackageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PackageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PackageApi
            //Assert.IsInstanceOfType(typeof(PackageApi), instance, "instance is a PackageApi");
        }

        
        /// <summary>
        /// Test CreatePackage
        /// </summary>
        [Test]
        public void CreatePackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string description = null;
            //DateTime? availableFrom = null;
            //DateTime? availableUntil = null;
            //List<long?> tickets = null;
            //List<long?> courses = null;
            //List<long?> accommodations = null;
            //List<long?> addons = null;
            //List<long?> prices = null;
            //var response = instance.CreatePackage(name, description, availableFrom, availableUntil, tickets, courses, accommodations, addons, prices);
            //Assert.IsInstanceOf<InlineResponse20032> (response, "response is InlineResponse20032");
        }
        
        /// <summary>
        /// Test DeletePackage
        /// </summary>
        [Test]
        public void DeletePackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeletePackage(id);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test EditPackage
        /// </summary>
        [Test]
        public void EditPackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string name = null;
            //string description = null;
            //DateTime? availableFrom = null;
            //DateTime? availableUntil = null;
            //List<long?> tickets = null;
            //List<long?> courses = null;
            //List<long?> accommodations = null;
            //List<long?> addons = null;
            //List<long?> prices = null;
            //var response = instance.EditPackage(id, name, description, availableFrom, availableUntil, tickets, courses, accommodations, addons, prices);
            //Assert.IsInstanceOf<InlineResponse20033> (response, "response is InlineResponse20033");
        }
        
        /// <summary>
        /// Test GetAllPackages
        /// </summary>
        [Test]
        public void GetAllPackagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllPackages();
            //Assert.IsInstanceOf<List<Package>> (response, "response is List<Package>");
        }
        
        /// <summary>
        /// Test GetAllWithTrashedPackages
        /// </summary>
        [Test]
        public void GetAllWithTrashedPackagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllWithTrashedPackages();
            //Assert.IsInstanceOf<List<Package>> (response, "response is List<Package>");
        }
        
        /// <summary>
        /// Test GetPackage
        /// </summary>
        [Test]
        public void GetPackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetPackage(id);
            //Assert.IsInstanceOf<InlineResponse20032> (response, "response is InlineResponse20032");
        }
        
    }

}
